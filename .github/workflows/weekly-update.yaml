name: PR Debug - Weekly Update Test (Actually Update README)
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR Î≤àÌò∏ (ÏÑ†ÌÉùÏÇ¨Ìï≠)'
        required: false
        type: string
      force_reset:
        description: 'Í∞ïÏ†ú Î¶¨ÏÖã'
        required: false
        default: true
        type: boolean
      notification:
        description: 'ÏïåÎ¶º Ï†ÑÏÜ° Ïó¨Î∂Ä'
        required: false
        default: false
        type: boolean
      actually_commit:
        description: 'Ïã§Ï†úÎ°ú README Ïª§Î∞ãÌïòÍ∏∞'
        required: false
        default: true
        type: boolean

permissions:
  contents: write  # README Ïª§Î∞ãÏùÑ ÏúÑÌï¥ write Í∂åÌïú ÌïÑÏöî
  pull-requests: write
  issues: write
  actions: read

env:
  TZ: Asia/Seoul
  DEBUG_MODE: true
  FORCE_RESET: true

jobs:
  pr-debug-with-commit:
    runs-on: ubuntu-latest
    steps:
      - name: PR Debug Info
        run: |
          echo "üî• PR DEBUG: README Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ (Ïª§Î∞ã Ìè¨Ìï®)"
          echo "‚è∞ Ïã§Ìñâ ÏãúÍ∞Ñ: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo "üîß Ìä∏Î¶¨Í±∞: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üìù PR Î≤àÌò∏: #${{ github.event.number }}"
            echo "üë§ PR ÏûëÏÑ±Ïûê: ${{ github.event.pull_request.user.login }}"
            echo "üåø Î∏åÎûúÏπò: ${{ github.event.pull_request.head.ref }}"
            echo "üìÑ Ï†úÎ™©: ${{ github.event.pull_request.title }}"
          fi
          echo "üë§ Ïã§ÌñâÏûê: ${{ github.actor }}"
          echo "üíæ Ïã§Ï†ú Ïª§Î∞ã: ${{ github.event.inputs.actually_commit || 'true' }}"
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          # main Î∏åÎûúÏπòÎ°ú Ï≤¥ÌÅ¨ÏïÑÏõÉÌïòÏó¨ Ïã§Ï†ú README ÏóÖÎç∞Ïù¥Ìä∏
          ref: main
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          
      - name: Install dependencies
        run: |
          pip install requests pytz
          echo "üì¶ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò ÏôÑÎ£å"
          
      - name: Debug - Check files structure
        run: |
          echo "üìÅ ÌååÏùº Íµ¨Ï°∞ ÌôïÏù∏ (main Î∏åÎûúÏπò):"
          echo "=== Root Directory ==="
          ls -la
          echo ""
          echo "=== Scripts Directory ==="
          if [ -d "scripts" ]; then
            ls -la scripts/
          else
            echo "‚ùå scripts ÎîîÎ†âÌÜ†Î¶¨ ÏóÜÏùå"
          fi
          echo ""
          echo "=== ÏÇ¨Ïö©Ïûê ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏ ==="
          for dir in */; do
            if [[ "$dir" != ".git/" && "$dir" != ".github/" && "$dir" != "scripts/" && "$dir" != "docs/" ]]; then
              echo "üìÇ $dir"
              if [ -d "$dir" ]; then
                find "$dir" -name "*.java" | head -5
              fi
            fi
          done
          
      - name: Check current session info using script
        id: session_check
        run: |
          echo "üîç ÌöåÏ∞® Ï†ïÎ≥¥ ÌôïÏù∏ Ï§ë (Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ Î™®Îìú)..."
          
          if [ -f "scripts/check_session.py" ]; then
            echo "üìù scripts/check_session.py Ïã§Ìñâ Ï§ë..."
            
            cd scripts
            RESULT=$(python check_session.py 2>&1)
            cd ..
            
            echo "üìã Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ Í≤∞Í≥º:"
            echo "$RESULT"
            
            echo "$RESULT" | grep "=" >> $GITHUB_ENV
            
            echo "‚úÖ check_session.py Ïã§Ìñâ ÏôÑÎ£å"
          else
            echo "‚ùå scripts/check_session.py ÏóÜÏùå - Ïã§Ï†ú ÌöåÏ∞® Ï†ïÎ≥¥ ÏÉùÏÑ±"
            
            TODAY=$(date '+%Y-%m-%d')
            WEEK_END=$(date -d '+6 days' '+%Y-%m-%d')
            
            # Ïã§Ï†ú ÌöåÏ∞® Î≤àÌò∏ ÏÇ¨Ïö© (PR Î≤àÌò∏ Í∏∞Î∞òÏù¥ ÏïÑÎãå)
            SESSION_NUM="2"  # Ïã§Ï†ú ÌòÑÏû¨ ÌöåÏ∞®
            
            echo "IS_NEW_WEEK=true" >> $GITHUB_ENV
            echo "SESSION_NUMBER=$SESSION_NUM" >> $GITHUB_ENV
            echo "TODAY=$TODAY" >> $GITHUB_ENV
            echo "WEEK_START=$TODAY" >> $GITHUB_ENV
            echo "WEEK_END=$WEEK_END" >> $GITHUB_ENV
            echo "DEADLINE=$WEEK_END 23:59" >> $GITHUB_ENV
            echo "HAS_SESSION_COUNTER=false" >> $GITHUB_ENV
            echo "TOTAL_WEEKS=1" >> $GITHUB_ENV
            echo "TOTAL_DAYS=7" >> $GITHUB_ENV
            echo "STUDY_START=2025-07-21" >> $GITHUB_ENV
          fi
          
      - name: Debug - Show environment variables
        run: |
          echo "üêõ ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏ (Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏):"
          echo "  IS_NEW_WEEK: $IS_NEW_WEEK"
          echo "  FORCE_RESET: $FORCE_RESET"
          echo "  SESSION_NUMBER: $SESSION_NUMBER"
          echo "  TODAY: $TODAY"
          echo "  WEEK_START: $WEEK_START"
          echo "  WEEK_END: $WEEK_END"
          echo "  DEADLINE: $DEADLINE"
          echo "  HAS_SESSION_COUNTER: $HAS_SESSION_COUNTER"
          echo "  TOTAL_WEEKS: $TOTAL_WEEKS"
          echo "  TOTAL_DAYS: $TOTAL_DAYS"
          
      - name: Create README backup
        run: |
          if [ -f "README.md" ]; then
            BACKUP_NAME="README_backup_$(date +%Y%m%d_%H%M%S)_pr_debug.md"
            cp README.md "$BACKUP_NAME"
            echo "üìÅ README Î∞±ÏóÖ ÏÉùÏÑ±: $BACKUP_NAME"
            echo "BACKUP_FILE=$BACKUP_NAME" >> $GITHUB_ENV
          else
            echo "‚ÑπÔ∏è Í∏∞Ï°¥ README.md ÏóÜÏùå"
          fi
          
      - name: Generate actual README using script
        run: |
          echo "üîÑ Ïã§Ï†ú README ÏÉùÏÑ± Ï§ë (ÎîîÎ≤ÑÍ∑∏ Ìä∏Î¶¨Í±∞, Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏)..."
          
          if [ -f "scripts/create_debug_readme.py" ]; then
            echo "üìù scripts/create_debug_readme.py Ïã§Ìñâ Ï§ë..."
            
            cd scripts
            python create_debug_readme.py --debug-mode --try-advanced
            cd ..
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Ïä§ÌÅ¨Î¶ΩÌä∏Î•º ÌÜµÌïú README ÏÉùÏÑ± ÏÑ±Í≥µ"
              echo "UPDATE_SUCCESS=true" >> $GITHUB_ENV
            else
              echo "‚ùå Ïä§ÌÅ¨Î¶ΩÌä∏Î•º ÌÜµÌïú README ÏÉùÏÑ± Ïã§Ìå®"
              echo "UPDATE_SUCCESS=false" >> $GITHUB_ENV
            fi
          else
            echo "‚ùå scripts/create_debug_readme.py ÏóÜÏùå - Í∏∞Î≥∏ README ÏÉùÏÑ±"
            
            # Ïã§Ï†ú ÌòÑÏû¨ ÌöåÏ∞® Ï†ïÎ≥¥Î°ú README ÏÉùÏÑ±
            echo "# üöÄ ÏïåÍ≥†Î¶¨Ï¶ò Ïä§ÌÑ∞Îîî" > README.md
            echo "" >> README.md
            echo "## üìÖ ${SESSION_NUMBER}ÌöåÏ∞® ÌòÑÌô©" >> README.md
            echo "**Í∏∞Í∞Ñ**: ${WEEK_START} ~ ${WEEK_END}" >> README.md
            echo "**ÎßàÍ∞ê**: ${DEADLINE}" >> README.md
            echo "" >> README.md
            echo "### Ï†úÏ∂ú ÌòÑÌô©" >> README.md
            echo "" >> README.md
            echo "| Ï∞∏Í∞ÄÏûê | Ïõî | Ìôî | Ïàò | Î™© | Í∏à | ÌÜ† | Ïùº |" >> README.md
            echo "|--------|----|----|----|----|----|----|---|" >> README.md
            echo "|        | 07/21 | 07/22 | 07/23 | 07/24 | 07/25 | 07/26 | 07/27 |" >> README.md
            
            # Ïã§Ï†ú Ï†úÏ∂ú ÌòÑÌô© Ïä§Ï∫î Î∞è Ï∂îÍ∞Ä
            echo "üìÇ Ïã§Ï†ú Ï†úÏ∂ú ÌòÑÌô© Ïä§Ï∫î Ï§ë..."
            for user_dir in */; do
              if [[ "$user_dir" != ".git/" && "$user_dir" != ".github/" && "$user_dir" != "scripts/" && "$user_dir" != "docs/" ]]; then
                user_name=$(basename "$user_dir")
                problems=()
                
                if [ -d "$user_dir" ]; then
                  for problem_dir in "$user_dir"*/; do
                    if [ -d "$problem_dir" ]; then
                      problem_num=$(basename "$problem_dir")
                      if [[ "$problem_num" =~ ^[0-9]+$ ]]; then
                        if find "$problem_dir" -name "*.java" | grep -q .; then
                          problems+=("$problem_num")
                        fi
                      fi
                    fi
                  done
                fi
                
                if [ ${#problems[@]} -gt 0 ]; then
                  # Î¨∏Ï†ú Î≤àÌò∏ Ï†ïÎ†¨
                  IFS=$'\n' sorted_problems=($(sort -n <<<"${problems[*]}"))
                  
                  # ÌÜ†ÏöîÏùºÏóê Î™®Îì† Î¨∏Ï†ú ÌëúÏãú (ÏûÑÏãú)
                  problem_list=""
                  if [ ${#sorted_problems[@]} -le 3 ]; then
                    problem_list=$(IFS=', '; echo "${sorted_problems[*]}")
                  else
                    problem_list="${sorted_problems[0]}, ${sorted_problems[1]}, ${sorted_problems[2]}..."
                  fi
                  
                  echo "| $user_name |  |  |  |  |  | $problem_list |  |" >> README.md
                  echo "   ‚úÖ $user_name: ${#sorted_problems[@]}Í∞ú Î¨∏Ï†ú Î∞úÍ≤¨"
                fi
              fi
            done
            
            echo "" >> README.md
            echo "## ü§ñ ÏûêÎèôÌôî ÏãúÏä§ÌÖú ÏÜåÍ∞ú" >> README.md
            echo "" >> README.md
            echo "### üîß Ï£ºÏöî Í∏∞Îä•" >> README.md
            echo "- **ÏûêÎèô ÌÖåÏä§Ìä∏**: ÏÉòÌîå ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ + AI ÏÉùÏÑ± Î∞òÎ°Ä ÌÖåÏä§Ìä∏" >> README.md
            echo "- **Ïä§ÎßàÌä∏ Ï±ÑÏ†ê**: Î∂ÄÎ∂Ñ Ï†êÏàò ÏßÄÏõê (ÏÉòÌîåÎßå/ÏÉùÏÑ± ÌÖåÏä§Ìä∏Îßå ÌÜµÍ≥º)" >> README.md
            echo "- **Í∞úÏù∏ ÏïåÎ¶º**: Mattermost Í∞úÏù∏ DMÏúºÎ°ú Í≤∞Í≥º ÏïåÎ¶º" >> README.md
            echo "- **ÏûêÎèô README ÏóÖÎç∞Ïù¥Ìä∏**: Ï†úÏ∂ú ÌòÑÌô© Ïã§ÏãúÍ∞Ñ Î∞òÏòÅ" >> README.md
            echo "- **PR ÎîîÎ≤ÑÍ∑∏**: PR ÏÉùÏÑ± Ïãú ÏûêÎèô ÌÖåÏä§Ìä∏ Ïã§Ìñâ" >> README.md
            echo "" >> README.md
            echo "---" >> README.md
            echo "*Auto-updated by GitHub Actions ü§ñ (PR DebugÎ°ú Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏Îê®)*" >> README.md
            
            echo "‚úÖ Ïã§Ï†ú Ï†úÏ∂ú ÌòÑÌô© Î∞òÏòÅ README ÏÉùÏÑ± ÏôÑÎ£å"
            echo "UPDATE_SUCCESS=true" >> $GITHUB_ENV
          fi
          
      - name: Show generated README preview
        run: |
          echo "üìÑ ÏÉùÏÑ±Îêú README.md ÎØ∏Î¶¨Î≥¥Í∏∞ (Ï≤´ 50Ï§Ñ):"
          echo "================================================"
          head -50 README.md
          echo "================================================"
          echo "(Ï¥ù $(wc -l < README.md) Ï§Ñ, $(stat -c%s README.md) bytes)"
          
      - name: Actually commit README changes
        if: env.UPDATE_SUCCESS == 'true' && (github.event.inputs.actually_commit != 'false')
        run: |
          echo "üíæ Ïã§Ï†ú README.md Ïª§Î∞ã Ï§ë..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - PR Debug Update"
          
          # Î≥ÄÍ≤ΩÎêú ÌååÏùºÎì§ Ï∂îÍ∞Ä
          git add README.md
          git add $BACKUP_FILE 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "üìù Î≥ÄÍ≤Ω ÏÇ¨Ìï≠Ïù¥ ÏóÜÏäµÎãàÎã§."
            echo "ACTUALLY_COMMITTED=false" >> $GITHUB_ENV
          else
            echo "üìù Ïã§Ï†ú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã:"
            git diff --staged --name-only
            
            COMMIT_TIME=$(date '+%Y-%m-%d %H:%M:%S KST')
            PR_INFO=""
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              PR_INFO=" (PR #${{ github.event.number }}Ïóê ÏùòÌï¥ Ìä∏Î¶¨Í±∞Îê®)"
            fi
            
            git commit -m "üîÑ ${SESSION_NUMBER}ÌöåÏ∞® README ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏${PR_INFO}

            üìÖ Í∏∞Í∞Ñ: ${WEEK_START} ~ ${WEEK_END}
            ‚è∞ ÎßàÍ∞ê: ${DEADLINE}
            üîß Ìä∏Î¶¨Í±∞: ${{ github.event_name }}
            üë§ Ïã§ÌñâÏûê: ${{ github.actor }}
            üïê ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ: $COMMIT_TIME

            ‚ú® Ïã§Ï†ú Ï†úÏ∂ú ÌòÑÌô©ÏùÑ Ïä§Ï∫îÌïòÏó¨ Î∞òÏòÅÌñàÏäµÎãàÎã§."
                        
            git push origin main
            
            echo "‚úÖ README.md Ïã§Ï†ú Ïª§Î∞ã Î∞è Ìë∏Ïãú ÏôÑÎ£å!"
            echo "ACTUALLY_COMMITTED=true" >> $GITHUB_ENV
          fi
          
      - name: Send actual notification
        if: env.ACTUALLY_COMMITTED == 'true' && github.event.inputs.notification == 'true'
        env:
          YEOMIN4242_MATTERMOST_URL: ${{ secrets.YEOMIN4242_MATTERMOST_URL }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "üì¢ Ïã§Ï†ú README ÏóÖÎç∞Ïù¥Ìä∏ ÏïåÎ¶º Ï†ÑÏÜ°..."
          
          if [ -f "scripts/send_notification.py" ]; then
            echo "üì® scripts/send_notification.py Ïã§Ìñâ Ï§ë..."
            
            cd scripts
            python send_notification.py --debug-mode
            cd ..
            
            echo "‚úÖ ÏïåÎ¶º Ï†ÑÏÜ° ÏôÑÎ£å"
          else
            echo "‚ùå scripts/send_notification.py ÏóÜÏùå - Í∏∞Î≥∏ ÏïåÎ¶º"
            
            if [ -n "$YEOMIN4242_MATTERMOST_URL" ]; then
              MESSAGE="üîÑ **README Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å!**

          üìÖ **${SESSION_NUMBER}ÌöåÏ∞®**: ${WEEK_START} ~ ${WEEK_END}
          ‚è∞ **ÎßàÍ∞ê**: ${DEADLINE}
          üîß **Ìä∏Î¶¨Í±∞**: ${{ github.event_name }}
          üë§ **Ïã§ÌñâÏûê**: ${{ github.actor }}
          üïê **ÏãúÍ∞Ñ**: $(date '+%Y-%m-%d %H:%M:%S KST')

          ‚úÖ Ïã§Ï†ú Ï†úÏ∂ú ÌòÑÌô©Ïù¥ READMEÏóê Î∞òÏòÅÎêòÏóàÏäµÎãàÎã§!
          üîó **ÌôïÏù∏ÌïòÍ∏∞**: https://github.com/${{ github.repository }}"

              curl -X POST "$YEOMIN4242_MATTERMOST_URL" \
                -H "Content-Type: application/json" \
                -d '{"text":"'"$MESSAGE"'"}' || echo "ÏïåÎ¶º Ï†ÑÏÜ° Ïã§Ìå®"
            else
              echo "‚ö†Ô∏è Mattermost webhook URLÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå"
            fi
          fi
          
      - name: Add PR comment with actual results
        if: github.event_name == 'pull_request' && env.UPDATE_SUCCESS == 'true'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.number;
            const sessionNumber = process.env.SESSION_NUMBER;
            const updateSuccess = process.env.UPDATE_SUCCESS;
            const actuallyCommitted = process.env.ACTUALLY_COMMITTED;
            
            const comment = `## üî• PR ÎîîÎ≤ÑÍ∑∏: README Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å!
            
            **‚è∞ Ïã§Ìñâ ÏãúÍ∞Ñ**: ${new Date().toLocaleString('ko-KR', {timeZone: 'Asia/Seoul'})} KST
            **üéØ ÌöåÏ∞®**: ${sessionNumber}ÌöåÏ∞® (Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏)
            **üìù README ÏÉùÏÑ±**: ${updateSuccess === 'true' ? '‚úÖ ÏÑ±Í≥µ' : '‚ùå Ïã§Ìå®'}
            **üíæ Ïã§Ï†ú Ïª§Î∞ã**: ${actuallyCommitted === 'true' ? '‚úÖ ÏôÑÎ£å' : '‚ùå Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏóÜÏùå'}
            
            ### üìã Ïã§Ï†ú ÏàòÌñâÎêú ÏûëÏóÖ
            - ‚úÖ main Î∏åÎûúÏπòÏóêÏÑú Ïã§Ï†ú ÌååÏùº Ïä§Ï∫î
            - ‚úÖ Ïã§Ï†ú Ï†úÏ∂ú ÌòÑÌô© Î∞òÏòÅ
            - ‚úÖ README.md ÌååÏùº Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏
            - ‚úÖ Git Ïª§Î∞ã Î∞è Ìë∏Ïãú ÏôÑÎ£å
            
            ### üîß Ïä§Ï∫î Í≤∞Í≥º
            - **Ïã§Ï†ú repository ÌååÏùº Ïä§Ï∫î ÏôÑÎ£å**
            - **ÏÇ¨Ïö©ÏûêÎ≥Ñ Î¨∏Ï†ú Ìè¥Îçî ÏûêÎèô Ïù∏Ïãù**
            - **Main.java ÌååÏùº Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏**
            - **Ï†úÏ∂ú ÌòÑÌô© ÌÖåÏù¥Î∏î ÏûêÎèô ÏÉùÏÑ±**
            
            ### üìä ÏóÖÎç∞Ïù¥Ìä∏ Ï†ïÎ≥¥
            - **ÌöåÏ∞®**: ${sessionNumber}ÌöåÏ∞®
            - **Í∏∞Í∞Ñ**: ${process.env.WEEK_START} ~ ${process.env.WEEK_END}
            - **ÎßàÍ∞ê**: ${process.env.DEADLINE}
            
            > üéâ **ÏôÑÎ£å**: Ïù¥Ï†ú main Î∏åÎûúÏπòÏùò README.mdÍ∞Ä Ïã§Ï†úÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§!
            > 
            > üìù **ÌôïÏù∏**: [ÏµúÏã† README Î≥¥Í∏∞](https://github.com/${context.repo.owner}/${context.repo.repo})
            
            ---
            *ü§ñ Ïã§Ï†ú README ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å - PR #${prNumber}Ïóê ÏùòÌï¥ Ìä∏Î¶¨Í±∞Îê®*`;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Final summary
        if: always()
        run: |
          echo "## üî• PR Debug - Ïã§Ï†ú README ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚ö†Ô∏è Ï£ºÏùò: Ïù¥Î≤àÏóêÎäî Ïã§Ï†úÎ°ú main Î∏åÎûúÏπò READMEÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ïã§Ìñâ ÏãúÍ∞Ñ**: $(date '+%Y-%m-%d %H:%M:%S KST')" >> $GITHUB_STEP_SUMMARY
          echo "**Ìä∏Î¶¨Í±∞**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "**PR Î≤àÌò∏**: #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
            echo "**PR ÏûëÏÑ±Ïûê**: ${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
            echo "**Î∏åÎûúÏπò**: ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ Í≤∞Í≥º" >> $GITHUB_STEP_SUMMARY
          echo "- **ÌöåÏ∞®**: ${SESSION_NUMBER}ÌöåÏ∞®" >> $GITHUB_STEP_SUMMARY
          echo "- **Í∏∞Í∞Ñ**: ${WEEK_START} ~ ${WEEK_END}" >> $GITHUB_STEP_SUMMARY
          echo "- **ÎßàÍ∞ê**: ${DEADLINE}" >> $GITHUB_STEP_SUMMARY
          echo "- **README ÏÉùÏÑ±**: ${UPDATE_SUCCESS}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ïã§Ï†ú Ïª§Î∞ã**: ${ACTUALLY_COMMITTED}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ ÏàòÌñâÎêú ÏûëÏóÖ" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **main Î∏åÎûúÏπò Ï≤¥ÌÅ¨ÏïÑÏõÉ**: Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌï¥" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Ïã§Ï†ú ÌååÏùº Ïä§Ï∫î**: repositoryÏùò Î™®Îì† ÏÇ¨Ïö©Ïûê Ìè¥Îçî" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Ï†úÏ∂ú ÌòÑÌô© Î∞òÏòÅ**: Ïã§Ï†ú Main.java ÌååÏùº Í∏∞Î∞ò" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **README ÏÉùÏÑ±**: Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î°ú ÌÖåÏù¥Î∏î Íµ¨ÏÑ±" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Git Ïª§Î∞ã**: main Î∏åÎûúÏπòÏóê Ïã§Ï†ú Ìë∏Ïãú" >> $GITHUB_STEP_SUMMARY
          
          if [ "$BACKUP_FILE" != "" ]; then
            echo "üìÅ **Î∞±ÏóÖ**: $BACKUP_FILE" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó ÌôïÏù∏ÌïòÍ∏∞" >> $GITHUB_STEP_SUMMARY
          echo "- [üìù ÏóÖÎç∞Ïù¥Ìä∏Îêú README Î≥¥Í∏∞](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- [üìà Ïª§Î∞ã ÌûàÏä§ÌÜ†Î¶¨ Î≥¥Í∏∞](https://github.com/${{ github.repository }}/commits/main)" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*üî• Ïã§Ï†ú README ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å - PR Ìä∏Î¶¨Í±∞Î°ú main Î∏åÎûúÏπò ÏóÖÎç∞Ïù¥Ìä∏!*" >> $GITHUB_STEP_SUMMARY