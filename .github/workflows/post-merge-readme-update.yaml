# PR 머지 후 README 업데이트 워크플로우
name: Post-Merge README Update

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write
  pull-requests: read

env:
  TZ: Asia/Seoul
  REPO_OWNER: "yeomin4242"

jobs:
  post-merge-update:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Post-Merge Workflow Info
        run: |
          echo "🎉 PR 머지 후 README 업데이트 워크플로우 시작"
          echo "⏰ 실행 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo "📋 머지된 PR: #${{ github.event.pull_request.number }}"
          echo "👤 PR 작성자: ${{ github.event.pull_request.user.login }}"
          echo "🌿 머지된 브랜치: ${{ github.event.pull_request.head.ref }}"

      - name: Validate and Parse Merged Branch
        id: branch-info
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
          HEAD_REPO="${{ github.event.pull_request.head.repo.full_name }}"
          BASE_REPO="${{ github.repository }}"
          REPO_OWNER="${{ env.REPO_OWNER }}"
          
          echo "🔍 머지된 브랜치 정보 분석"
          echo "📂 Head Repository: $HEAD_REPO"
          echo "📂 Base Repository: $BASE_REPO"
          echo "🌿 브랜치: $BRANCH_NAME"
          echo "👤 PR 작성자: $AUTHOR"
          
          # 포크 여부 확인
          if [ "$HEAD_REPO" != "$BASE_REPO" ]; then
            echo "🔀 포크된 저장소에서의 PR이 머지되었습니다."
            IS_FORK="true"
          else
            echo "📍 원본 저장소에서의 PR이 머지되었습니다."
            IS_FORK="false"
          fi
          
          # 저장소 소유자인지 확인
          if [ "$AUTHOR" = "$REPO_OWNER" ]; then
            echo "👑 저장소 소유자의 PR이 머지되었습니다."
            IS_OWNER="true"
            SHOULD_UPDATE="true"
            WEEK_NUMBER="owner"
            BRANCH_USER="$AUTHOR"
          else
            echo "👤 일반 사용자의 PR이 머지되었습니다."
            IS_OWNER="false"
            
            # week-N-<githubID> 패턴 검증
            if [[ $BRANCH_NAME =~ ^week-([0-9]+)-(.+)$ ]]; then
              WEEK_NUMBER="${BASH_REMATCH[1]}"
              BRANCH_USER="${BASH_REMATCH[2]}"
              
              echo "✅ 알고리즘 스터디 브랜치입니다."
              echo "📅 주차: $WEEK_NUMBER"
              echo "👤 브랜치 사용자: $BRANCH_USER"
              
              SHOULD_UPDATE="true"
            else
              echo "ℹ️ 알고리즘 스터디 브랜치가 아닙니다. README 업데이트를 건너뜁니다."
              SHOULD_UPDATE="false"
            fi
          fi
          
          echo "should_update=$SHOULD_UPDATE" >> $GITHUB_OUTPUT
          echo "week_number=$WEEK_NUMBER" >> $GITHUB_OUTPUT
          echo "branch_user=$BRANCH_USER" >> $GITHUB_OUTPUT
          echo "is_fork=$IS_FORK" >> $GITHUB_OUTPUT
          echo "is_owner=$IS_OWNER" >> $GITHUB_OUTPUT

      - name: Checkout Main Branch
        if: steps.branch-info.outputs.should_update == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          fetch-depth: 0

      - name: Setup Python
        if: steps.branch-info.outputs.should_update == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        if: steps.branch-info.outputs.should_update == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install google-genai pytz requests beautifulsoup4

      - name: Analyze Merged PR and Update README
        if: steps.branch-info.outputs.should_update == 'true'
        env:
          WEEK_NUMBER: ${{ steps.branch-info.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-info.outputs.branch_user }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          IS_FORK: ${{ steps.branch-info.outputs.is_fork }}
          IS_OWNER: ${{ steps.branch-info.outputs.is_owner }}
        run: |
          if [ "$IS_OWNER" = "true" ]; then
            echo "📝 저장소 소유자의 머지된 PR에 대해 README 업데이트를 수행합니다."
          else
            echo "📝 Week $WEEK_NUMBER - $BRANCH_USER님의 머지된 PR에 대해 README 업데이트를 수행합니다."
          fi
          echo "🔗 PR 번호: $PR_NUMBER"
          echo "🔀 포크 여부: $IS_FORK"
          
          # PR에서 변경된 파일들을 분석하여 제출된 문제 파악
          echo "🔍 머지된 PR의 변경사항을 분석합니다..."
          
          # GitHub API를 사용하여 PR의 파일 목록 가져오기
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/files" \
               > pr_files.json
          
          # 머지된 PR 분석 스크립트 실행
          python scripts/analyze_merged_pr.py
          
          # README 업데이트 스크립트 실행
          if [ -f "problems_info.json" ]; then
            echo "✅ 제출된 문제 정보를 찾았습니다."
            python scripts/update_readme_batch.py
          else
            echo "ℹ️ 제출된 알고리즘 문제가 없습니다."
          fi

      - name: Commit README Changes
        if: steps.branch-info.outputs.should_update == 'true'
        env:
          WEEK_NUMBER: ${{ steps.branch-info.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-info.outputs.branch_user }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          IS_OWNER: ${{ steps.branch-info.outputs.is_owner }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
          if ! git diff --quiet README.md; then
            echo "📋 README.md 변경사항을 커밋합니다."
            
            # 커밋 메시지 구성
            if [ "$IS_OWNER" = "true" ]; then
              COMMIT_MSG="docs: Update README.md after merging owner's solution (PR #$PR_NUMBER)"
            else
              COMMIT_MSG="docs: Update README.md after merging week-$WEEK_NUMBER solution by $BRANCH_USER (PR #$PR_NUMBER)"
            fi
            
            git add README.md
            git commit -m "$COMMIT_MSG"
            git push origin main
            echo "✅ README 업데이트가 완료되었습니다."
          else
            echo "ℹ️ README.md에 변경사항이 없습니다."
          fi

      - name: Send Merge Completion Notification
        if: steps.branch-info.outputs.should_update == 'true'
        env:
          PERSONAL_WEBHOOK_URL: ${{ secrets[format('{0}_MATTERMOST_URL', steps.branch-info.outputs.branch_user)] }}
          WEEK_NUMBER: ${{ steps.branch-info.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-info.outputs.branch_user }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          IS_OWNER: ${{ steps.branch-info.outputs.is_owner }}
        run: |
          if [ -n "$PERSONAL_WEBHOOK_URL" ]; then
            if [ "$IS_OWNER" = "true" ]; then
              echo "🎉 저장소 소유자의 솔루션이 머지되었습니다! 알림을 전송합니다."
            else
              echo "🎉 Week $WEEK_NUMBER - $BRANCH_USER님의 솔루션이 머지되었습니다! 알림을 전송합니다."
            fi
            
            # 머지 완료 알림 스크립트 실행
            python scripts/send_merge_notification.py \
              "${{ github.event.pull_request.html_url }}" \
              "$BRANCH_USER" \
              "$WEEK_NUMBER" \
              "$PERSONAL_WEBHOOK_URL"
          else
            echo "⚠️ $BRANCH_USER님의 Mattermost 웹훅 URL이 설정되지 않았습니다."
            echo "💡 시크릿 이름: ${BRANCH_USER}_MATTERMOST_URL"
          fi