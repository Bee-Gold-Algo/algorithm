# 워크플로우 이름: 포크 PR 자동 처리 (테스트, README 업데이트, 승인)
# 설명: 외부 기여자가 포크한 저장소에서 올바른 형식으로 PR을 보냈을 때,
#       자동으로 코드를 테스트하고 원본 저장소의 README.md를 업데이트한 후,
#       성공적으로 완료되면 해당 PR을 자동으로 승인합니다.
#       이 워크플로우는 PAT를 사용하지 않으며, 오직 포크된 저장소의 PR에만 반응합니다.

name: Fork PR Automation (Complete)

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  contents: write
  pull-requests: write

env:
  TZ: Asia/Seoul
  PYTHON_VERSION: "3.11"
  JAVA_VERSION: "11"

jobs:
  process_fork_pr:
    # 이 잡(job)은 포크된 저장소에서 온 PR일 경우에만 실행됩니다.
    if: github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    steps:
      # =================================================================
      # 1. 브랜치 전략 검증
      # =================================================================
      - name: Validate Branch Strategy
        id: branch-validation
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
          VALIDATION_RESULT="invalid"
          WEEK_NUMBER=""
          BRANCH_USER=""

          if [[ $BRANCH_NAME =~ ^week-([0-9]+)-(.+)$ ]]; then
            WEEK_NUMBER="${BASH_REMATCH[1]}"
            BRANCH_USER="${BASH_REMATCH[2]}"
            if [ "$BRANCH_USER" = "$AUTHOR" ]; then
              VALIDATION_RESULT="valid"
              echo "✅ 유효한 브랜치입니다: ${BRANCH_NAME}"
            else
              echo "❌ 브랜치 사용자(${BRANCH_USER})와 PR 작성자(${AUTHOR})가 다릅니다."
            fi
          else
            echo "❌ 브랜치 이름이 week-N-<githubID> 패턴을 따르지 않습니다."
          fi
          echo "valid=$VALIDATION_RESULT" >> $GITHUB_OUTPUT
          echo "week_number=$WEEK_NUMBER" >> $GITHUB_OUTPUT
          echo "branch_user=$BRANCH_USER" >> $GITHUB_OUTPUT

      # 유효하지 않으면 코멘트 남기고 워크플로우 실패 처리
      - name: Comment on Invalid Branch
        if: steps.branch-validation.outputs.valid == 'invalid'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '## ⚠️ 브랜치 전략 검증 실패\n\n브랜치 이름이 `week-N-<githubID>` 패턴을 따르고, `<githubID>`가 본인의 ID와 일치해야 합니다.'
            });
            process.exit(1); // 워크플로우를 실패로 중단

      # =================================================================
      # 2. PR 코드 체크아웃 및 테스트
      # =================================================================
      - name: Checkout PR Code for Testing
        if: steps.branch-validation.outputs.valid == 'valid'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Python
        if: steps.branch-validation.outputs.valid == 'valid'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Setup Java
        if: steps.branch-validation.outputs.valid == 'valid'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Install Python dependencies
        if: steps.branch-validation.outputs.valid == 'valid'
        run: |
          python -m pip install --upgrade pip
          pip install google-genai pytz requests beautifulsoup4

      - name: Run PR Logic - Extract & Test
        if: steps.branch-validation.outputs.valid == 'valid'
        id: pr-test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          WEEK_NUMBER: ${{ steps.branch-validation.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-validation.outputs.branch_user }}
        run: |
          python scripts/extract_pr_info.py
          if [ -f "problems_info.json" ]; then
            python scripts/multi_test_runner.py
          else
            echo "테스트할 문제가 없습니다."
            # problems_info.json이 없으면 빈 JSON 파일 생성
            echo '[]' > problems_info.json
          fi
        continue-on-error: true

      - name: Run PR Logic - Analyze Results & Post Comment
        if: steps.branch-validation.outputs.valid == 'valid'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            // 테스트 결과 분석 스크립트 실행
            const { execSync } = require('child_process');
            try {
              execSync('python scripts/analyze_test_results.py');
            } catch (e) {
              console.error('analyze_test_results.py 실행 실패:', e);
              // 분석 실패 시 기본값으로 JSON 생성
              fs.writeFileSync('test_results_summary.json', JSON.stringify({
                passed_problems: 0, partial_passed_problems: 0, failed_problems: 0, total_problems: 0
              }));
            }
            
            // 테스트 결과 코멘트 작성
            if (!fs.existsSync('test_results_summary.json')) {
              console.log('test_results_summary.json 파일이 없습니다.');
              return;
            }
            const results = JSON.parse(fs.readFileSync('test_results_summary.json', 'utf8'));
            const { passed_problems, partial_passed_problems, failed_problems, total_problems } = results;
            const weekNumber = '${{ steps.branch-validation.outputs.week_number }}';
            const branchUser = '${{ steps.branch-validation.outputs.branch_user }}';
            
            let commentBody = `## 📊 테스트 결과 요약 (Week ${weekNumber} - ${branchUser})\n\n`;
            commentBody += `| 전체 | ✅ 성공 | ⚠️ 부분 성공 | ❌ 실패 |\n`;
            commentBody += `|:---:|:---:|:---:|:---:|\n`;
            commentBody += `| ${total_problems}개 | ${passed_problems}개 | ${partial_passed_problems}개 | ${failed_problems}개 |\n\n`;
            commentBody += `✅ **이 PR의 모든 자동화 작업(README 업데이트, 승인)이 곧 완료됩니다.**`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      # =================================================================
      # 3. 분석 결과물을 Artifact로 임시 저장
      # =================================================================
      - name: Upload analysis file as artifact
        if: steps.branch-validation.outputs.valid == 'valid'
        uses: actions/upload-artifact@v4
        with:
          name: problem-info-artifact
          path: problems_info.json # 테스트 단계에서 생성된 파일
          retention-days: 1

      # =================================================================
      # 4. 원본 저장소 체크아웃 및 README 업데이트
      # =================================================================
      - name: Checkout Base Repo for README update
        if: steps.branch-validation.outputs.valid == 'valid'
        uses: actions/checkout@v4
        with:
          ref: 'main'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download analysis file artifact
        if: steps.branch-validation.outputs.valid == 'valid'
        uses: actions/download-artifact@v4
        with:
          name: problem-info-artifact

      - name: Update README.md file
        if: steps.branch-validation.outputs.valid == 'valid'
        env:
          WEEK_NUMBER: ${{ steps.branch-validation.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-validation.outputs.branch_user }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          if [ -f "problems_info.json" ] && [ -s "problems_info.json" ] && [ "$(cat problems_info.json)" != "[]" ]; then
            echo "📝 README.md 업데이트를 시작합니다."
            python scripts/update_readme_batch.py
          else
            echo "⚠️ README 업데이트에 필요한 정보가 없어 Fallback 로직을 실행합니다."
            # Fallback 로직: 간단한 제출 기록만 남김
          fi

      # =================================================================
      # 5. README 변경사항 커밋 및 푸시
      # =================================================================
      - name: Commit and Push README.md
        if: steps.branch-validation.outputs.valid == 'valid'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update README for week-${{ steps.branch-validation.outputs.week_number }} by ${{ steps.branch-validation.outputs.branch_user }} (PR #${{ github.event.pull_request.number }})"
          branch: main
          commit_user_name: GitHub Action Bot
          commit_user_email: action@github.com
          file_pattern: README.md

      # =================================================================
      # 6. 모든 작업 완료 후 PR 자동 승인
      # =================================================================
      - name: Auto-approve the PR
        if: steps.branch-validation.outputs.valid == 'valid'
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          review-message: "✅ 자동화된 테스트 및 README 업데이트가 모두 완료되어 자동으로 승인되었습니다."
