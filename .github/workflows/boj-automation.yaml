# 워크플로우 이름: 알고리즘 스터디 자동화 (Approve 기반)
name: Algorithm Study Automation (Approve Based)

on:
  schedule:
    # KST 기준 매주 월요일 00:00 (UTC 일요일 15:00)
    - cron: '0 15 * * 0'
  pull_request_target:
    types: [opened, synchronize, reopened]  # submitted 추가 (리뷰 제출 시)
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write

env:
  TZ: Asia/Seoul
  PYTHON_VERSION: "3.11"
  JAVA_VERSION: "11"
  REPO_OWNER: "yeomin4242"

jobs:
  # 포크 PR 자동 승인 및 실행
  auto-approve-fork:
    if: github.event_name == 'pull_request_target' && github.event.action != 'submitted' && github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    steps:
      - name: Auto-approve fork PRs
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          review-message: "✅ 포크된 저장소에서의 PR이 자동으로 승인되었습니다. 알고리즘 스터디 자동화 시스템이 실행됩니다."

  test-and-update:
    # 자동 승인 후, PR 생성 시, 또는 리뷰 제출 시 실행
    needs: [auto-approve-fork]
    if: always() && (needs.auto-approve-fork.result == 'success' || needs.auto-approve-fork.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Workflow Info
        run: |
          echo "🔥 알고리즘 스터디 자동화 워크플로우 시작"
          echo "⏰ 실행 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo "🔧 트리거: ${{ github.event_name }}"
          echo "🎬 액션: ${{ github.event.action }}"
          if [ "${{ github.event_name }}" = "pull_request_target" ]; then
            echo "🔍 Repository: ${{ github.repository }}"
            echo "🌿 Head Repository: ${{ github.event.pull_request.head.repo.full_name }}"
            echo "🌿 Head Ref: ${{ github.event.pull_request.head.ref }}"
            echo "👤 PR Author: ${{ github.event.pull_request.user.login }}"
            if [ "${{ github.event.action }}" = "submitted" ]; then
              echo "📝 Review State: ${{ github.event.review.state }}"
              echo "👥 Reviewer: ${{ github.event.review.user.login }}"
            fi
          fi

      # 브랜치 전략 검증 및 권한 확인
      - name: Validate Branch Strategy and Permissions
        if: github.event_name == 'pull_request_target'
        id: branch-validation
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
          HEAD_REPO="${{ github.event.pull_request.head.repo.full_name }}"
          BASE_REPO="${{ github.repository }}"
          REPO_OWNER="${{ env.REPO_OWNER }}"
          ACTION="${{ github.event.action }}"
          
          echo "🔍 브랜치 전략 검증 시작"
          echo "📂 Head Repository: $HEAD_REPO"
          echo "📂 Base Repository: $BASE_REPO"
          echo "🌿 브랜치: $BRANCH_NAME"
          echo "👤 PR 작성자: $AUTHOR"
          echo "👑 저장소 소유자: $REPO_OWNER"
          echo "🎬 액션: $ACTION"
          
          # 포크 여부 확인
          if [ "$HEAD_REPO" != "$BASE_REPO" ]; then
            echo "🔀 포크된 저장소에서의 PR입니다."
            IS_FORK="true"
          else
            echo "📍 원본 저장소에서의 PR입니다."
            IS_FORK="false"
          fi
          
          # 저장소 소유자인지 확인
          if [ "$AUTHOR" = "$REPO_OWNER" ]; then
            echo "👑 저장소 소유자의 PR입니다."
            IS_OWNER="true"
          else
            echo "👤 일반 사용자의 PR입니다."
            IS_OWNER="false"
          fi
          
          # 승인 여부 확인 (submitted 액션인 경우)
          IS_APPROVED="false"
          if [ "$ACTION" = "submitted" ]; then
            REVIEW_STATE="${{ github.event.review.state }}"
            if [ "$REVIEW_STATE" = "approved" ]; then
              echo "✅ PR이 승인되었습니다!"
              IS_APPROVED="true"
            else
              echo "ℹ️ PR 승인이 아닌 리뷰입니다: $REVIEW_STATE"
            fi
          fi
          
          # 브랜치 전략 검증
          VALIDATION_RESULT="valid"
          VALIDATION_MESSAGE=""
          
          if [ "$IS_OWNER" = "true" ]; then
            # 저장소 소유자는 모든 브랜치 패턴 허용
            echo "✅ 저장소 소유자는 모든 브랜치 패턴을 사용할 수 있습니다."
            WEEK_NUMBER="owner"
            BRANCH_USER="$AUTHOR"
          else
            # 일반 사용자는 week-N-<githubID> 패턴 강제
            if [[ $BRANCH_NAME =~ ^week-([0-9]+)-(.+)$ ]]; then
              WEEK_NUMBER="${BASH_REMATCH[1]}"
              BRANCH_USER="${BASH_REMATCH[2]}"
              
              echo "✅ 올바른 브랜치 패턴입니다. (week-$WEEK_NUMBER-$BRANCH_USER)"
              
              # 포크 환경에서는 브랜치 사용자와 PR 작성자 일치 확인
              if [ "$IS_FORK" = "true" ]; then
                if [ "$BRANCH_USER" = "$AUTHOR" ]; then
                  echo "✅ 포크 환경: 브랜치 사용자와 PR 작성자가 일치합니다."
                else
                  echo "❌ 포크 환경: 브랜치 사용자($BRANCH_USER)와 PR 작성자($AUTHOR)가 일치하지 않습니다."
                  VALIDATION_RESULT="invalid"
                  VALIDATION_MESSAGE="포크 환경에서는 자신의 GitHub ID로 브랜치를 생성해야 합니다."
                fi
              else
                echo "✅ 원본 저장소: 협업자가 다른 사용자의 브랜치를 생성할 수 있습니다."
              fi
            else
              echo "❌ 일반 사용자는 week-N-<githubID> 패턴을 따라야 합니다."
              echo "💡 올바른 예시: week-1-$AUTHOR, week-2-$AUTHOR"
              VALIDATION_RESULT="invalid"
              VALIDATION_MESSAGE="브랜치 이름이 week-N-<githubID> 패턴을 따르지 않습니다."
            fi
          fi
          
          # 결과 출력
          echo "valid=$VALIDATION_RESULT" >> $GITHUB_OUTPUT
          echo "is_fork=$IS_FORK" >> $GITHUB_OUTPUT
          echo "is_owner=$IS_OWNER" >> $GITHUB_OUTPUT
          echo "is_approved=$IS_APPROVED" >> $GITHUB_OUTPUT
          echo "week_number=$WEEK_NUMBER" >> $GITHUB_OUTPUT
          echo "branch_user=$BRANCH_USER" >> $GITHUB_OUTPUT
          echo "validation_message=$VALIDATION_MESSAGE" >> $GITHUB_OUTPUT

      # 브랜치 검증 실패 시 PR에 가이드 코멘트
      - name: Comment on Invalid Branch Strategy
        if: github.event_name == 'pull_request_target' && github.event.action != 'submitted' && steps.branch-validation.outputs.valid == 'invalid'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ github.event.pull_request.head.ref }}';
            const author = '${{ github.event.pull_request.user.login }}';
            const isFork = '${{ steps.branch-validation.outputs.is_fork }}' === 'true';
            const isOwner = '${{ steps.branch-validation.outputs.is_owner }}' === 'true';
            const validationMessage = '${{ steps.branch-validation.outputs.validation_message }}';
            const headRepo = '${{ github.event.pull_request.head.repo.full_name }}';
            const repoOwner = '${{ env.REPO_OWNER }}';
            
            let commentBody = `## ⚠️ 브랜치 전략 검증 실패\n\n`;
            commentBody += `현재 브랜치: \`${branchName}\`\n`;
            commentBody += `PR 작성자: \`${author}\`\n`;
            commentBody += `저장소 타입: ${isFork ? '🔀 포크된 저장소' : '📍 원본 저장소'}\n`;
            commentBody += `권한: ${isOwner ? '👑 저장소 소유자' : '👤 일반 사용자'}\n\n`;
            
            commentBody += `❌ **문제**: ${validationMessage}\n\n`;
            
            if (!isOwner) {
              commentBody += `### 📝 일반 사용자 브랜치 규칙\n`;
              commentBody += `- **패턴**: \`week-N-<githubID>\`\n`;
              commentBody += `- **예시**: \`week-1-${author}\`, \`week-2-${author}\`\n\n`;
              
              if (isFork) {
                commentBody += `### 🔧 포크 환경에서의 해결 방법\n`;
                commentBody += `포크된 저장소(\`${headRepo}\`)에서 다음 명령을 실행하세요:\n\n`;
                commentBody += `\`\`\`bash\n`;
                commentBody += `# 올바른 브랜치 이름으로 변경\n`;
                commentBody += `git branch -m ${branchName} week-1-${author}\n\n`;
                commentBody += `# 새 브랜치 이름으로 푸시\n`;
                commentBody += `git push origin week-1-${author}\n\n`;
                commentBody += `# 기존 브랜치 삭제\n`;
                commentBody += `git push origin --delete ${branchName}\n`;
                commentBody += `\`\`\`\n\n`;
                commentBody += `그 후 새로운 PR을 생성해주세요.`;
              }
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      # 안전한 체크아웃
      - name: Checkout Code (Safe for Forks)
        if: github.event_name != 'pull_request_target' || steps.branch-validation.outputs.valid == 'valid'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.base.ref || github.ref }}
          fetch-depth: 0

      # PR 변경사항 안전하게 가져오기
      - name: Fetch PR Changes (For Fork Safety)
        if: github.event_name == 'pull_request_target' && steps.branch-validation.outputs.valid == 'valid'
        run: |
          echo "🔄 PR 변경사항을 안전하게 가져옵니다..."
          git remote add pr-head ${{ github.event.pull_request.head.repo.clone_url }}
          git fetch pr-head ${{ github.event.pull_request.head.ref }}:pr-branch
          git checkout pr-branch
          echo "✅ PR 브랜치로 체크아웃 완료"

      - name: Setup Python and Java
        if: github.event_name != 'pull_request_target' || steps.branch-validation.outputs.valid == 'valid'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Setup Java
        if: github.event_name != 'pull_request_target' || steps.branch-validation.outputs.valid == 'valid'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Install Python dependencies
        if: github.event_name != 'pull_request_target' || steps.branch-validation.outputs.valid == 'valid'
        run: |
          python -m pip install --upgrade pip
          pip install google-genai pytz requests beautifulsoup4

      # =================================================================
      #  PR 테스트 로직 (PR 생성 시에만 실행)
      # =================================================================
      - name: Run PR Logic - Extract & Test
        if: github.event_name == 'pull_request_target' && github.event.action != 'submitted' && steps.branch-validation.outputs.valid == 'valid'
        id: pr-test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          WEEK_NUMBER: ${{ steps.branch-validation.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-validation.outputs.branch_user }}
          IS_OWNER: ${{ steps.branch-validation.outputs.is_owner }}
        run: |
          if [ "$IS_OWNER" = "true" ]; then
            echo "👑 저장소 소유자의 솔루션을 분석합니다."
          else
            echo "📅 주차 $WEEK_NUMBER의 $BRANCH_USER님의 솔루션을 분석합니다."
          fi
          
          python scripts/extract_pr_info.py
          if [ -f "problems_info.json" ]; then
            python scripts/multi_test_runner.py
          else
            echo "테스트할 문제가 없습니다."
          fi
        continue-on-error: true

      - name: Run PR Logic - Analyze Results
        if: github.event_name == 'pull_request_target' && github.event.action != 'submitted' && steps.branch-validation.outputs.valid == 'valid' && steps.pr-test.outcome != 'skipped'
        id: analyze-results
        run: python scripts/analyze_test_results.py

      - name: Run PR Logic - Post Test Results Comment
        if: github.event_name == 'pull_request_target' && github.event.action != 'submitted' && steps.branch-validation.outputs.valid == 'valid' && steps.analyze-results.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const weekNumber = '${{ steps.branch-validation.outputs.week_number }}';
            const branchUser = '${{ steps.branch-validation.outputs.branch_user }}';
            const isOwner = '${{ steps.branch-validation.outputs.is_owner }}' === 'true';
            const isFork = '${{ steps.branch-validation.outputs.is_fork }}' === 'true';
            
            // 파일이 존재하는지 확인
            if (!fs.existsSync('test_results_summary.json')) {
              console.log('test_results_summary.json 파일이 없습니다.');
              return;
            }
            
            const results = JSON.parse(fs.readFileSync('test_results_summary.json', 'utf8'));
            const { overall_success, passed_problems, partial_passed_problems, failed_problems, total_problems } = results;
            
            let commentBody = `## 📊 테스트 결과 요약\n\n`;
            
            if (isOwner) {
              commentBody += `### 👑 저장소 소유자 제출\n`;
            } else {
              commentBody += `### Week ${weekNumber} - ${branchUser}님의 제출\n`;
            }
            
            commentBody += `| 전체 | ✅ 성공 | ⚠️ 부분 성공 | ❌ 실패 |\n`;
            commentBody += `|:---:|:---:|:---:|:---:|\n`;
            commentBody += `| ${total_problems}개 | ${passed_problems}개 | ${partial_passed_problems}개 | ${failed_problems}개 |\n\n`;
            
            commentBody += `### 📋 제출 정보\n`;
            commentBody += `- **제출자**: ${branchUser} ${isOwner ? '(저장소 소유자)' : ''}\n`;
            if (!isOwner) {
              commentBody += `- **주차**: Week ${weekNumber}\n`;
            }
            commentBody += `- **브랜치**: \`${{ github.event.pull_request.head.ref }}\`\n`;
            commentBody += `- **저장소**: ${isFork ? '🔀 포크된 저장소' : '📍 원본 저장소'}\n\n`;
            
            commentBody += `### 🎯 다음 단계\n`;
            commentBody += `✅ **이 PR을 approve하면 README가 자동으로 업데이트됩니다!**\n\n`;
            
            commentBody += `---\n🎉 **테스트가 완료되었습니다!** PR을 승인하면 제출 현황이 README에 반영됩니다.`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      # =================================================================
      #  README 업데이트 로직 (Approve 시에만 실행)
      # =================================================================
      - name: Update README on Approve
        if: github.event_name == 'pull_request_target' && github.event.action == 'submitted' && steps.branch-validation.outputs.is_approved == 'true' && steps.branch-validation.outputs.valid == 'valid'
        env:
          WEEK_NUMBER: ${{ steps.branch-validation.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-validation.outputs.branch_user }}
          IS_OWNER: ${{ steps.branch-validation.outputs.is_owner }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          if [ "$IS_OWNER" = "true" ]; then
            echo "👑 저장소 소유자의 PR이 승인되었습니다. README를 업데이트합니다."
          else
            echo "✅ Week $WEEK_NUMBER - $BRANCH_USER님의 PR이 승인되었습니다. README를 업데이트합니다."
          fi
          
          # PR의 변경된 파일들을 분석
          echo "🔍 PR의 변경사항을 분석합니다..."
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/files" \
               > pr_files.json
          
          # 머지된 PR 분석 스크립트 실행
          if [ -f "scripts/analyze_merged_pr.py" ]; then
            echo "📊 PR 파일 분석을 수행합니다."
            python scripts/analyze_merged_pr.py
          else
            echo "⚠️ analyze_merged_pr.py 스크립트가 없습니다."
          fi
          
          # README 업데이트 수행
          if [ -f "problems_info.json" ] && [ -f "scripts/update_readme_batch.py" ]; then
            echo "📝 README 업데이트를 수행합니다."
            python scripts/update_readme_batch.py || {
              echo "❌ README 업데이트 중 오류 발생했지만 계속 진행합니다."
            }
          else
            echo "⚠️ 필요한 파일이 없어 README 업데이트를 건너뜁니다."
          fi

      - name: Commit README Changes on Approve
        if: github.event_name == 'pull_request_target' && github.event.action == 'submitted' && steps.branch-validation.outputs.is_approved == 'true' && steps.branch-validation.outputs.valid == 'valid'
        env:
          WEEK_NUMBER: ${{ steps.branch-validation.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-validation.outputs.branch_user }}
          IS_OWNER: ${{ steps.branch-validation.outputs.is_owner }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          # main 브랜치로 체크아웃
          git checkout main
          git pull origin main
          
          # 동일한 분석을 main 브랜치에서 수행
          if [ -f "pr_files.json" ] && [ -f "scripts/analyze_merged_pr.py" ]; then
            python scripts/analyze_merged_pr.py
          fi
          
          if [ -f "problems_info.json" ] && [ -f "scripts/update_readme_batch.py" ]; then
            python scripts/update_readme_batch.py || echo "README 업데이트 실패했지만 계속 진행"
          fi
          
          # Git 설정 및 커밋
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
          if ! git diff --quiet README.md; then
            echo "📝 README.md 변경사항을 커밋합니다."
            
            # 커밋 메시지 구성
            if [ "$IS_OWNER" = "true" ]; then
              COMMIT_MSG="docs: Update README.md after approving owner's PR #$PR_NUMBER"
            else
              COMMIT_MSG="docs: Update README.md for week-$WEEK_NUMBER by $BRANCH_USER (approved PR #$PR_NUMBER)"
            fi
            
            git add README.md
            git commit -m "$COMMIT_MSG"
            git push origin main
            echo "✅ README 업데이트가 완료되었습니다."
          else
            echo "ℹ️ README.md에 변경사항이 없습니다."
          fi

      - name: Post Approve Success Comment
        if: github.event_name == 'pull_request_target' && github.event.action == 'submitted' && steps.branch-validation.outputs.is_approved == 'true' && steps.branch-validation.outputs.valid == 'valid'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const weekNumber = '${{ steps.branch-validation.outputs.week_number }}';
            const branchUser = '${{ steps.branch-validation.outputs.branch_user }}';
            const isOwner = '${{ steps.branch-validation.outputs.is_owner }}' === 'true';
            
            let commentBody = `## 🎉 README 업데이트 완료!\n\n`;
            
            if (isOwner) {
              commentBody += `👑 **저장소 소유자의 제출이 승인되어 README가 업데이트되었습니다.**\n\n`;
            } else {
              commentBody += `✅ **Week ${weekNumber} - ${branchUser}님의 제출이 승인되어 README가 업데이트되었습니다.**\n\n`;
            }
            
            commentBody += `### 📝 변경사항\n`;
            commentBody += `- ✅ 제출 현황이 README에 반영되었습니다\n`;
            commentBody += `- 📊 문제 해결 기록이 업데이트되었습니다\n\n`;
            commentBody += `이제 이 PR을 안전하게 머지할 수 있습니다! 🚀`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Send Mattermost DM Notification
        if: github.event_name == 'pull_request_target' && github.event.action != 'submitted' && steps.branch-validation.outputs.valid == 'valid' && always() && steps.analyze-results.outcome != 'skipped'
        env:
          PERSONAL_WEBHOOK_URL: ${{ secrets[format('{0}_MATTERMOST_URL', steps.branch-validation.outputs.branch_user)] }}
          WEEK_NUMBER: ${{ steps.branch-validation.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-validation.outputs.branch_user }}
          IS_OWNER: ${{ steps.branch-validation.outputs.is_owner }}
        run: |
          if [ -n "$PERSONAL_WEBHOOK_URL" ]; then
            if [ "${{ steps.analyze-results.outputs.overall_result }}" = "PASS" ]; then
              if [ "$IS_OWNER" = "true" ]; then
                echo "✅ 저장소 소유자 테스트 성공! 성공 알림을 전송합니다."
              else
                echo "✅ Week $WEEK_NUMBER - $BRANCH_USER님 테스트 성공! 성공 알림을 전송합니다."
              fi
              python scripts/send_success_notification.py "${{ github.event.pull_request.html_url }}" "$BRANCH_USER" "$PERSONAL_WEBHOOK_URL" || echo "알림 전송 실패"
            else
              if [ "$IS_OWNER" = "true" ]; then
                echo "❌ 저장소 소유자 테스트 실패! 실패 알림을 전송합니다."
              else
                echo "❌ Week $WEEK_NUMBER - $BRANCH_USER님 테스트 실패! 실패 알림을 전송합니다."
              fi
              python scripts/send_failure_notification.py "${{ github.event.pull_request.html_url }}" "$BRANCH_USER" "$PERSONAL_WEBHOOK_URL" || echo "알림 전송 실패"
            fi
          else
            echo "⚠️ $BRANCH_USER님의 Mattermost 웹훅 URL이 설정되지 않았습니다."
          fi

      # =================================================================
      #  주간 실행 로직
      # =================================================================
      - name: Run Weekly Logic - Reset README for New Week
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          echo "📅 새로운 주차를 위해 README를 초기화합니다."
          python scripts/weekly_reset.py --force

      - name: Run Weekly Logic - Commit and Push to main
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          if ! git diff --quiet README.md; then
            echo "README.md 변경사항을 main 브랜치에 커밋합니다."
            git add README.md
            git commit -m "chore: 주간 README 초기화"
            git push origin main
          else
            echo "README.md에 변경사항이 없어 커밋하지 않습니다."
          fi