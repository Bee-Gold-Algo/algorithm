# GitHub Actions 워크플로우 이름
name: BOJ Study Automation (Gemini API)

# 워크플로우 실행 조건
on:
  pull_request:
    branches: [main]
  schedule:
    - cron: "* * * * *"

# 실행될 작업(Job) 목록
jobs:
  # PR 검증 및 자동 병합 작업
  test-and-merge:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    # 작업에 필요한 권한 설정
    permissions:
      contents: write # README.md 업데이트 및 커밋/푸시를 위해 필요
      pull-requests: write # PR에 테스트 결과 댓글을 작성하기 위해 필요

    steps:
      # 1. 코드 체크아웃
      # PR 브랜치 자체를 가져와 'Detached HEAD' 문제를 해결합니다.
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}

      # 2. Python 환경 설정
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 3. Java 환경 설정
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      # 4. Python 의존성 설치 (Gemini API 기반)
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-genai pytz beautifulsoup4 requests

        # 5. Gemini API 환경 테스트 (최신 버전)
      - name: Test Gemini API environment
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🤖 Gemini 2.5-flash API 환경 테스트..."
          echo "Python version: $(python --version)"
          
          # Gemini API 키 확인
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "❌ GEMINI_API_KEY가 설정되지 않았습니다."
            exit 1
          else
            echo "✅ GEMINI_API_KEY 설정 확인됨"
          fi
          
          # 설치된 라이브러리 확인
          echo "📦 설치된 라이브러리 확인..."
          pip list | grep -E "(google|genai)" || echo "⚠️ google 관련 패키지를 찾을 수 없습니다."
          
          # 별도 Python 파일 생성 및 실행
          echo "📦 google-genai 라이브러리 테스트..."
          cat > test_gemini_api.py << 'EOF'
          import os
          import sys

          print("🔍 Gemini 2.5-flash API 연결 테스트...")

          try:
              from google import genai
              from google.genai import types
              print("✅ google-genai 라이브러리 import 성공")
              
              # 클라이언트 설정 테스트
              client = genai.Client(api_key=os.environ["GEMINI_API_KEY"])
              print("✅ Gemini 2.5-flash API 클라이언트 생성 성공")
              
              # 간단한 테스트 요청
              print("🧪 간단한 API 테스트 수행...")
              config = types.GenerateContentConfig(
                  temperature=0.1,
                  max_output_tokens=100
              )
              
              response = client.models.generate_content(
                  model="gemini-2.5-flash",
                  contents="Hello, can you respond with just 'API_TEST_SUCCESS'?",
                  config=config
              )
              
              if hasattr(response, "text") and "API_TEST_SUCCESS" in response.text:
                  print("✅ Gemini 2.5-flash API 테스트 완료")
                  sys.exit(0)
              else:
                  text = response.text if hasattr(response, "text") else "No text"
                  print(f"⚠️ API 응답 확인: {text}")
                  print("✅ API 연결은 성공했으나 응답 형식이 예상과 다름")
                  sys.exit(0)
                  
          except ImportError as e:
              print(f"❌ google-genai 라이브러리 import 실패: {e}")
              print("다음 명령어로 설치하세요: pip install google-genai")
              sys.exit(1)
          except Exception as e:
              print(f"❌ Gemini 2.5-flash API 연결 실패: {e}")
              print("API 키 또는 네트워크 연결을 확인하세요.")
              sys.exit(1)
          EOF
              
              # Python 파일 실행
              python test_gemini_api.py
              
              # 네트워크 연결 테스트
              echo "📡 네트워크 연결 테스트..."
              curl -I https://generativelanguage.googleapis.com/ --max-time 10 || echo "⚠️ Gemini API 엔드포인트 직접 접근 제한됨"
              curl -I https://solved.ac/ --max-time 10 || echo "⚠️ solved.ac 접근 제한됨"


      
      # 6. PR에서 문제 및 코드 정보 추출 (GitHub API 사용으로 변경)
      - name: Extract problem and code info
        id: extract-info
        run: python scripts/extract_pr_info.py # 스크립트 내부에서 API를 호출하도록 변경
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7. 파일 구조 및 유효성 확인
      - name: Check valid problems
        id: check-validity
        run: |
          HAS_VALID_PROBLEMS="${{ steps.extract-info.outputs.has_valid_problems }}"
          PROBLEM_ID="${{ steps.extract-info.outputs.problem_id }}"

          if [ "$HAS_VALID_PROBLEMS" = "false" ] || [ "$PROBLEM_ID" = "0000" ]; then
            echo "skip_tests=true" >> $GITHUB_OUTPUT
            echo "⚠️ 분석할 수 있는 유효한 문제가 없습니다."
          else
            echo "skip_tests=false" >> $GITHUB_OUTPUT
            echo "✅ 유효한 문제를 발견했습니다. Gemini API 웹 검색을 시작합니다."
          fi

      # 8. Gemini 2.5-flash API로 백준 문제 정보 검색 (강화된 재시도 로직)
      - name: Search BOJ problem information with Gemini 2.5-flash
        if: steps.check-validity.outputs.skip_tests == 'false'
        id: search-problem
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          PROBLEM_ID="${{ steps.extract-info.outputs.problem_id }}"
          echo "🤖 Gemini 2.5-flash로 문제 $PROBLEM_ID 정보 검색 시작..."
          
          # 여러 번 재시도 (최신 API는 더 안정적이므로 재시도 간격 단축)
          SUCCESS=false
          for attempt in {1..3}; do
            echo "🚀 Gemini 2.5-flash 검색 시도 $attempt/3..."
            
            if python scripts/fetch_boj_problem.py --problem-id $PROBLEM_ID; then
              echo "✅ Gemini 2.5-flash 웹 검색 성공!"
              echo "search_success=true" >> $GITHUB_OUTPUT
              SUCCESS=true
              break
            else
              echo "❌ Gemini 검색 시도 $attempt 실패"
              if [ $attempt -lt 3 ]; then
                echo "⏳ 15초 후 재시도..."
                sleep 15
              fi
            fi
          done
          
          if [ "$SUCCESS" = "false" ]; then
            echo "💥 모든 Gemini 2.5-flash 검색 시도 실패"
            echo "search_success=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      # 9. Gemini 검색 실패 시 대안 처리
      - name: Handle Gemini search failure
        if: steps.check-validity.outputs.skip_tests == 'false' && steps.search-problem.outputs.search_success != 'true'
        run: |
          PROBLEM_ID="${{ steps.extract-info.outputs.problem_id }}"
          echo "🛠️ Gemini 검색 실패로 인한 대안 처리..."
          
          # solved.ac API만으로 기본 정보 수집 시도
          echo "📡 solved.ac API로 기본 정보 수집 시도..."
          python -c "
          import requests
          import json
          
          try:
              url = f'https://solved.ac/api/v3/problem/show?problemId=$PROBLEM_ID'
              response = requests.get(url, timeout=15)
              if response.status_code == 200:
                  data = response.json()
                  tags = []
                  for tag_data in data.get('tags', []):
                      korean_name = next((d['name'] for d in tag_data.get('displayNames', []) if d['language'] == 'ko'), None)
                      if korean_name:
                          tags.append(korean_name)
                  
                  problem_info = {
                      'problem_id': '$PROBLEM_ID',
                      'title': data.get('titleKo', '문제 $PROBLEM_ID'),
                      'level': data.get('level', 'N/A'),
                      'tags': tags,
                      'description': f'Gemini 검색 실패로 인해 문제 설명을 가져올 수 없습니다. https://www.acmicpc.net/problem/$PROBLEM_ID 에서 직접 확인해주세요.',
                      'input_format': '입력 형식을 직접 확인해주세요.',
                      'output_format': '출력 형식을 직접 확인해주세요.',
                      'limits': '시간/메모리 제한을 직접 확인해주세요.',
                      'hint': '',
                      'samples': []
                  }
                  
                  with open('problem_info.json', 'w', encoding='utf-8') as f:
                      json.dump(problem_info, f, ensure_ascii=False, indent=2)
                  print('✅ solved.ac 기본 정보 수집 완료')
              else:
                  raise Exception(f'API 응답 코드: {response.status_code}')
          except Exception as e:
              print(f'⚠️ solved.ac API 실패: {e}')
              # 최소한의 정보라도 제공
              problem_info = {
                  'problem_id': '$PROBLEM_ID',
                  'title': '문제 $PROBLEM_ID',
                  'level': 'N/A',
                  'tags': [],
                  'description': 'API 검색 실패로 인해 문제 설명을 가져올 수 없습니다. https://www.acmicpc.net/problem/$PROBLEM_ID 에서 직접 확인해주세요.',
                  'input_format': '입력 형식을 직접 확인해주세요.',
                  'output_format': '출력 형식을 직접 확인해주세요.',
                  'limits': '시간/메모리 제한을 직접 확인해주세요.',
                  'hint': '',
                  'samples': []
              }
              with open('problem_info.json', 'w', encoding='utf-8') as f:
                  json.dump(problem_info, f, ensure_ascii=False, indent=2)
              print('⚠️ 최소한의 정보 파일 생성')
          "
          
          # 빈 샘플 테스트 파일 생성
          cat > sample_tests.json << EOF
          {
            "problem_id": "$PROBLEM_ID",
            "test_cases": []
          }
          EOF
          
          echo "⚠️ 대안 정보 파일 생성 완료"

      # 10. 검색 결과 확인 및 검증
      - name: Verify search results
        if: steps.check-validity.outputs.skip_tests == 'false'
        run: |
          echo "📊 Gemini 검색 결과 검증..."
          
          if [ -f problem_info.json ]; then
            echo "✅ problem_info.json 파일 존재"
            echo "📄 problem_info.json 내용:"
            cat problem_info.json | python -m json.tool | head -20
          else
            echo "❌ problem_info.json 파일 없음"
          fi
          
          if [ -f sample_tests.json ]; then
            echo "✅ sample_tests.json 파일 존재"
            echo "📄 sample_tests.json 내용:"
            cat sample_tests.json | python -m json.tool
          else
            echo "❌ sample_tests.json 파일 없음"
          fi

      # 11. Gemini 2.5-flash API로 반례 테스트케이스 생성
      - name: Generate test cases with Gemini 2.5-flash
        if: steps.check-validity.outputs.skip_tests == 'false'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🤖 Gemini 2.5-flash로 테스트케이스 생성 중..."
          python scripts/gemini_test_generator.py \
            --problem-id ${{ steps.extract-info.outputs.problem_id }} \
            --code-file ${{ steps.extract-info.outputs.code_file }} \
            --language ${{ steps.extract-info.outputs.language }} \
            --problem-info problem_info.json


      # 12. 모든 테스트 실행
      - name: Run all tests
        if: steps.check-validity.outputs.skip_tests == 'false'
        id: run-tests
        run: |
          echo "🧪 모든 테스트 실행 중..."
          python scripts/test_runner.py \
            --code-file ${{ steps.extract-info.outputs.code_file }} \
            --language ${{ steps.extract-info.outputs.language }} \
            --sample-tests sample_tests.json \
            --generated-tests generated_tests.json

      # 13. 테스트 통과 시 README.md 업데이트
      - name: Update README on success
        if: steps.run-tests.outputs.result == 'PASS'
        run: |
          echo "📝 README.md 업데이트 중..."
          python scripts/update_readme.py \
            --problem-id ${{ steps.extract-info.outputs.problem_id }} \
            --author ${{ steps.extract-info.outputs.author }} \
            --submission-date $(date '+%Y-%m-%d') \
            --language ${{ steps.extract-info.outputs.language }}

      # 14. README.md 변경사항을 PR 브랜치에 커밋 및 푸시
      - name: Commit and Push README changes
        if: steps.run-tests.outputs.result == 'PASS'
        run: |
          git config --local user.email "${{ github.event.pull_request.user.login }}@users.noreply.github.com"
          git config --local user.name "${{ github.event.pull_request.user.login }}"
          git add README.md
          if ! git diff --cached --quiet; then
            git commit -m "📊 Update progress: Problem ${{ steps.extract-info.outputs.problem_id }} solved by ${{ steps.extract-info.outputs.author }}"
            git push origin ${{ github.event.pull_request.head.ref }}
          else
            echo "README.md에 변경사항이 없어 커밋하지 않습니다."
          fi

      # 15. Gemini 검색 성공 시 Mattermost 알림 (2.5-flash 정보 포함)
      - name: Send success notification with Gemini 2.5-flash info
        if: steps.run-tests.outputs.result == 'PASS'
        run: |
          PROBLEM_ID="${{ steps.extract-info.outputs.problem_id }}"
          AUTHOR="${{ steps.extract-info.outputs.author }}"
          LANGUAGE="${{ steps.extract-info.outputs.language }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          SEARCH_SUCCESS="${{ steps.search-problem.outputs.search_success }}"
          
          # 검색 상태에 따른 메시지 조정
          if [ "$SEARCH_SUCCESS" = "true" ]; then
            SEARCH_STATUS="🤖 Gemini 2.5-flash 웹 검색 성공"
          else
            SEARCH_STATUS="⚠️ Gemini 검색 실패 (대안 정보 사용)"
          fi

          cat > payload.json << EOF
          {
            "username": "BOJ-Bot",
            "icon_emoji": ":white_check_mark:",
            "text": "🎉 **Test Passed!**\\n\\n**Problem**: ${PROBLEM_ID}\\n**Solver**: ${AUTHOR}\\n**Language**: ${LANGUAGE}\\n**AI**: ${SEARCH_STATUS}\\n**Model**: Gemini 2.5-flash\\n**PR**: ${PR_URL}\\n\\n✅ 모든 테스트를 통과했습니다!"
          }
          EOF

              curl -X POST \
                -H "Content-Type: application/json" \
                -d @payload.json \
                "${{ secrets.MATTERMOST_WEBHOOK_URL }}" \
                --fail --silent --show-error

      # 16. 테스트 실패 시 상세 알림 (2.5-flash 정보 포함)
      - name: Send failure notification with Gemini 2.5-flash details
        if: steps.run-tests.outputs.result == 'FAIL'
        run: |
          PROBLEM_ID="${{ steps.extract-info.outputs.problem_id }}"
          AUTHOR="${{ steps.extract-info.outputs.author }}"
          LANGUAGE="${{ steps.extract-info.outputs.language }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          SEARCH_SUCCESS="${{ steps.search-problem.outputs.search_success }}"

          ERROR_DETAILS="${{ steps.run-tests.outputs.details }}"
          ERROR_DETAILS=$(echo "$ERROR_DETAILS" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')

          # 검색 상태 추가
          if [ "$SEARCH_SUCCESS" = "true" ]; then
            SEARCH_INFO="🤖 Gemini 2.5-flash: 성공"
          else
            SEARCH_INFO="⚠️ Gemini 검색: 실패 (기본 정보로 테스트)"
          fi
          
          cat > payload.json << EOF
          {
            "username": "BOJ-Bot",
            "icon_emoji": ":x:",
            "text": "❌ **Test Failed!**\\n\\n**Problem**: ${PROBLEM_ID}\\n**Submitter**: ${AUTHOR}\\n**Language**: ${LANGUAGE}\\n**AI**: ${SEARCH_INFO}\\n**Model**: Gemini 2.5-flash\\n**PR**: ${PR_URL}\\n\\n**Error Details:**\\n\`\`\`\\n${ERROR_DETAILS}\\n\`\`\`\\n\\n💪 코드를 수정한 후 다시 푸시해주세요!"
          }
          EOF

          curl -X POST \
            -H "Content-Type: application/json" \
            -d @payload.json \
            "${{ secrets.MATTERMOST_WEBHOOK_URL }}" \
            --fail --silent --show-error


      # 17. PR에 테스트 결과 댓글 작성 (Gemini 2.5-flash 정보 포함)
      - name: Comment test results with Gemini 2.5-flash status
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { result, details } = ${{ toJSON(steps.run-tests.outputs) }};
            const { 
              author, 
              problem_id,
              has_valid_problems,
              problems_summary,
              total_problems_count,
              is_multiple_problems
            } = ${{ toJSON(steps.extract-info.outputs) }};
            
            const searchSuccess = "${{ steps.search-problem.outputs.search_success }}";

            // 유효한 문제가 없는 경우  
            if (has_valid_problems === 'false' || problem_id === '0000') {
              const body = `## 📁 분석할 수 있는 문제가 없습니다

            **${author}**님의 PR에서 분석할 수 있는 Main.java 파일을 찾지 못했습니다.

            **확인 사항:**
            - 파일 경로가 \`본인이름/문제번호/Main.java\` 형식으로 작성되었는지 확인하세요
            - 실제로 변경사항이 있는 파일인지 확인하세요
            - PR에 본인의 파일만 포함되어 있는지 확인하세요

            ${problems_summary}

            올바른 형식으로 파일을 추가한 후 다시 푸시해주세요! 📝`;
                              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              return;
            }

            // Gemini 2.5-flash 검색 상태 메시지 생성
            let searchStatusEmoji = "";
            let searchStatusText = "";
            
            if (searchSuccess === 'true') {
              searchStatusEmoji = "🤖";
              searchStatusText = "Gemini 2.5-flash 웹 검색 성공";
            } else {
              searchStatusEmoji = "⚠️";
              searchStatusText = "Gemini 검색 실패 (기본 정보로 테스트 진행)";
            }

            // 정상적인 테스트 결과 처리
            let body;
            
            // 여러 문제 변경 시 헤더 추가
            const multiProblemHeader = is_multiple_problems === 'true' ? 
              `## 📊 다중 문제 변경 감지 (총 ${total_problems_count}개)
              
            ${problems_summary}

            **현재 테스트**: 문제 ${problem_id} (우선순위 최상위)

            ---

            ` : '';

            if (result === 'PASS') {
              body = `${multiProblemHeader}## ✅ 테스트 통과!

            🎉 **${author}**님의 문제 **${problem_id}** 해결을 축하합니다!

            **테스트 결과:**
            - ✅ 샘플 테스트: 통과
            - 🤖 AI 생성 반례 테스트: 통과  
            - ${searchStatusEmoji} AI 검색: ${searchStatusText}
            - 🧠 AI 모델: Gemini 2.5-flash
            - 📊 README.md가 자동으로 업데이트되었습니다.

            ${is_multiple_problems === 'true' ? 
              `💡 **참고**: 이번 PR에서 변경된 다른 문제들도 동일하게 검증되었을 것으로 간주됩니다.` : 
              ''}

            브랜치 병합하고 삭제해주세요! 🚀`;

            } else {
              body = `${multiProblemHeader}## ❌ 테스트 실패

            **${author}**님의 문제 **${problem_id}** 코드에서 문제가 발견되었습니다:

            **테스트 상태:**
            - ${searchStatusEmoji} AI 검색: ${searchStatusText}
            - 🧠 AI 모델: Gemini 2.5-flash
            
            **오류 내용:**
            \`\`\`
            ${details}
            \`\`\`

            ${searchSuccess !== 'true' ? 
              `⚠️ **Gemini 검색 실패 안내**: AI 웹 검색으로 문제 정보를 가져오지 못했습니다. 샘플 테스트케이스가 부족할 수 있으니 직접 확인 후 제출해주세요.` : 
              ''}

            ${is_multiple_problems === 'true' ? 
              `💡 **참고**: 우선순위가 가장 높은 문제부터 테스트합니다. 이 문제를 해결한 후 다시 푸시하면 다른 문제들도 함께 검증됩니다.` :  
              ''}

            코드를 수정한 후 다시 푸시해주세요! 💪`;
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number, 
              owner: context.repo.owner, 
              repo: context.repo.repo, 
              body: body
            });

      # 18. Gemini 2.5-flash 검색 결과 업로드 (디버그용)
      - name: Upload Gemini 2.5-flash search results
        if: always() && steps.check-validity.outputs.skip_tests == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: gemini-2.5-flash-results-${{ steps.extract-info.outputs.problem_id }}
          path: |
            problem_info.json
            sample_tests.json
            generated_tests.json
          retention-days: 7

      # 19. 다중 문제 알림 (Mattermost)
      - name: Send multiple problems notification
        if: steps.extract-info.outputs.multiple_problems == 'true'
        run: |
          PROBLEMS_COUNT="${{ steps.extract-info.outputs.problems_count }}"
          AUTHOR="${{ steps.extract-info.outputs.author }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          cat > payload.json << EOF
          {
            "username": "BOJ-Bot",
            "icon_emoji": ":warning:",
            "text": "⚠️ **다중 문제 제출 감지**\\n\\n**${AUTHOR}**님이 PR #${PR_NUMBER}에서 ${PROBLEMS_COUNT}개의 문제를 동시에 제출했습니다.\\n\\n💡 **권장사항**: 문제별로 개별 PR을 만들어 주세요!\\n\\nPR 링크: ${PR_URL}"
          }
          EOF

          curl -X POST \
            -H "Content-Type: application/json" \
            -d @payload.json \
            "${{ secrets.MATTERMOST_WEBHOOK_URL }}" \
            --fail --silent --show-error

  # 데드라인 알림 작업
  deadline-reminder:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      - name: Check deadlines and send reminders
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python scripts/deadline_checker.py