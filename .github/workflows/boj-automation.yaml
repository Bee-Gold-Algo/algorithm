# GitHub Actions 워크플로우 이름
name: BOJ Study Automation

# 워크플로우 실행 조건
on:
  pull_request:
    branches: [main]
  schedule:
    - cron: "* * * * *"

# 실행될 작업(Job) 목록
jobs:
  # PR 검증 및 자동 병합 작업
  test-and-merge:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    # 작업에 필요한 권한 설정
    permissions:
      contents: write # README.md 업데이트 및 커밋/푸시를 위해 필요
      pull-requests: write # PR에 테스트 결과 댓글을 작성하기 위해 필요

    steps:
      # 1. 코드 체크아웃
      # PR 브랜치 자체를 가져와 'Detached HEAD' 문제를 해결합니다.
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}

      # 2. Python 환경 설정
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # 3. Java 환경 설정
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      # 4. Python 의존성 설치
      - name: Install dependencies
        run: pip install google-generativeai pytz selenium webdriver-manager beautifulsoup4 requests playwright

      - name: Install Playwright browsers
        run: python -m playwright install --with-deps

      # 5. PR에서 문제 및 코드 정보 추출 (GitHub API 사용으로 변경)
      - name: Extract problem and code info
        id: extract-info
        run: python scripts/extract_pr_info.py # 스크립트 내부에서 API를 호출하도록 변경
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # 6. 파일 구조 및 유효성 확인
      - name: Check valid problems
        id: check-validity
        run: |
          HAS_VALID_PROBLEMS="${{ steps.extract-info.outputs.has_valid_problems }}"
          PROBLEM_ID="${{ steps.extract-info.outputs.problem_id }}"

          if [ "$HAS_VALID_PROBLEMS" = "false" ] || [ "$PROBLEM_ID" = "0000" ]; then
            echo "skip_tests=true" >> $GITHUB_OUTPUT
            echo "⚠️ 분석할 수 있는 유효한 문제가 없습니다."
          else
            echo "skip_tests=false" >> $GITHUB_OUTPUT
            echo "✅ 유효한 문제를 발견했습니다. 테스트를 진행합니다."
          fi

      # 7. solved.ac API로 문제 정보 가져오기
      - name: Get problem details from solved.ac
        if: steps.check-validity.outputs.skip_tests == 'false'
        run: |
          python scripts/fetch_boj_problem.py \
            --problem-id ${{ steps.extract-info.outputs.problem_id }}

      # 8. Gemini API로 반례 테스트케이스 생성
      - name: Generate test cases with Gemini
        if: steps.check-validity.outputs.skip_tests == 'false'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python scripts/gemini_test_generator.py \
            --problem-id ${{ steps.extract-info.outputs.problem_id }} \
            --code-file ${{ steps.extract-info.outputs.code_file }} \
            --language ${{ steps.extract-info.outputs.language }} \
            --problem-info problem_info.json

      # 9. 모든 테스트 실행
      - name: Run all tests
        if: steps.check-validity.outputs.skip_tests == 'false'
        id: run-tests
        run: |
          python scripts/test_runner.py \
            --code-file ${{ steps.extract-info.outputs.code_file }} \
            --language ${{ steps.extract-info.outputs.language }} \
            --sample-tests sample_tests.json \
            --generated-tests generated_tests.json

      # 10. 테스트 통과 시 README.md 업데이트
      - name: Update README on success
        if: steps.run-tests.outputs.result == 'PASS'
        run: |
          python scripts/update_readme.py \
            --problem-id ${{ steps.extract-info.outputs.problem_id }} \
            --author ${{ steps.extract-info.outputs.author }} \
            --submission-date $(date '+%Y-%m-%d') \
            --language ${{ steps.extract-info.outputs.language }}

      # 11. README.md 변경사항을 PR 브랜치에 커밋 및 푸시
      - name: Commit and Push README changes
        if: steps.run-tests.outputs.result == 'PASS'
        run: |
          git config --local user.email "${{ github.event.pull_request.user.login }}@users.noreply.github.com"
          git config --local user.name "${{ github.event.pull_request.user.login }}"
          git add README.md
          if ! git diff --cached --quiet; then
            git commit -m "📊 Update progress: Problem ${{ steps.extract-info.outputs.problem_id }} solved by ${{ steps.extract-info.outputs.author }}"
            git push origin ${{ github.event.pull_request.head.ref }}
          else
            echo "README.md에 변경사항이 없어 커밋하지 않습니다."
          fi

      # 12. 테스트 통과 시 Mattermost 알림 전송
      - name: Send Mattermost notification on success
        if: steps.run-tests.outputs.result == 'PASS'
        run: |
          PROBLEM_ID="${{ steps.extract-info.outputs.problem_id }}"
          AUTHOR="${{ steps.extract-info.outputs.author }}"
          LANGUAGE="${{ steps.extract-info.outputs.language }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          TOTAL_COUNT="${{ steps.extract-info.outputs.total_problems_count }}"
          ADDED_COUNT="${{ steps.extract-info.outputs.added_problems_count }}"
          MODIFIED_COUNT="${{ steps.extract-info.outputs.modified_problems_count }}"

          # 추가 정보 생성
          EXTRA_INFO=""
          if [ "$TOTAL_COUNT" != "1" ]; then
            if [ "$ADDED_COUNT" != "0" ] && [ "$MODIFIED_COUNT" != "0" ]; then
              EXTRA_INFO="\\n📊 이번 PR: 총 ${TOTAL_COUNT}개 (새 문제 ${ADDED_COUNT}개, 수정 ${MODIFIED_COUNT}개)"
            elif [ "$ADDED_COUNT" != "0" ]; then
              EXTRA_INFO="\\n📊 이번 PR: 새 문제 ${ADDED_COUNT}개"
            elif [ "$MODIFIED_COUNT" != "0" ]; then
              EXTRA_INFO="\\n📊 이번 PR: 수정된 문제 ${MODIFIED_COUNT}개"
            fi
          fi

          cat > payload.json << EOF
          {
            "username": "BOJ-Bot",
            "icon_emoji": ":white_check_mark:",
            "text": "🎉 Test Passed!\\nProblem: ${PROBLEM_ID}\\nSolver: ${AUTHOR}\\nLanguage: ${LANGUAGE}\\nPR: ${PR_URL}${EXTRA_INFO}"
          }
          EOF

          curl -X POST \
            -H "Content-Type: application/json" \
            -d @payload.json \
            "${{ secrets.MATTERMOST_WEBHOOK_URL }}" \
            --fail --silent --show-error

      # 13. 테스트 실패 시 Mattermost 알림 전송
      - name: Send Mattermost notification on failure
        if: steps.run-tests.outputs.result == 'FAIL'
        run: |
          PROBLEM_ID="${{ steps.extract-info.outputs.problem_id }}"
          AUTHOR="${{ steps.extract-info.outputs.author }}"
          LANGUAGE="${{ steps.extract-info.outputs.language }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          ERROR_DETAILS="${{ steps.run-tests.outputs.details }}"
          ERROR_DETAILS=$(echo "$ERROR_DETAILS" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')

          cat > payload.json << EOF
          {
            "username": "BOJ-Bot",
            "icon_emoji": ":x:",
            "text": "❌ Test Failed!\\nProblem: ${PROBLEM_ID}\\nSubmitter: ${AUTHOR}\\nLanguage: ${LANGUAGE}\\nPR: ${PR_URL}\\n\\n**Error Details:**\\n\`\`\`\\n${ERROR_DETAILS}\\n\`\`\`\\n\\n💪 Please fix the code and push again!"
          }
          EOF

          curl -X POST \
            -H "Content-Type: application/json" \
            -d @payload.json \
            "${{ secrets.MATTERMOST_WEBHOOK_URL }}" \
            --fail --silent --show-error

      # 14. PR에 테스트 결과 댓글 작성
      - name: Comment test results
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { result, details } = ${{ toJSON(steps.run-tests.outputs) }};
            const { 
              author, 
              problem_id,
              has_valid_problems,
              problems_summary,
              total_problems_count,
              is_multiple_problems
            } = ${{ toJSON(steps.extract-info.outputs) }};

            // 유효한 문제가 없는 경우  
            if (has_valid_problems === 'false' || problem_id === '0000') {
              const body = `## 📁 분석할 수 있는 문제가 없습니다

            **${author}**님의 PR에서 분석할 수 있는 Main.java 파일을 찾지 못했습니다.

            **확인 사항:**
            - 파일 경로가 \`본인이름/문제번호/Main.java\` 형식으로 작성되었는지 확인하세요
            - 실제로 변경사항이 있는 파일인지 확인하세요
            - PR에 본인의 파일만 포함되어 있는지 확인하세요

            ${problems_summary}

            올바른 형식으로 파일을 추가한 후 다시 푸시해주세요! 📝`;
                          
                          await github.rest.issues.createComment({
                            issue_number: context.issue.number,
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            body: body
                          });
                          return;
                        }

                        // 정상적인 테스트 결과 처리
                        let body;
                        
                        // 여러 문제 변경 시 헤더 추가
                        const multiProblemHeader = is_multiple_problems === 'true' ? 
                          `## 📊 다중 문제 변경 감지 (총 ${total_problems_count}개)
                          
            ${problems_summary}

            **현재 테스트**: 문제 ${problem_id} (우선순위 최상위)

            ---

            ` : '';

                        if (result === 'PASS') {
                          body = `${multiProblemHeader}## ✅ 테스트 통과!

            🎉 **${author}**님의 문제 **${problem_id}** 해결을 축하합니다!

            - ✅ 샘플 테스트: 통과
            - 🤖 AI 생성 반례 테스트: 통과  
            - 📊 README.md가 자동으로 업데이트되었습니다.

            ${is_multiple_problems === 'true' ? 
              `💡 **참고**: 이번 PR에서 변경된 다른 문제들도 동일하게 검증되었을 것으로 간주됩니다.` : 
              ''}

            브랜치 병합하고 삭제해주세요! 🚀`;

                        } else {
                          body = `${multiProblemHeader}## ❌ 테스트 실패

            **${author}**님의 문제 **${problem_id}** 코드에서 문제가 발견되었습니다:

            \`\`\`
            ${details}
            \`\`\`

            ${is_multiple_problems === 'true' ? 
              `💡 **참고**: 우선순위가 가장 높은 문제부터 테스트합니다. 이 문제를 해결한 후 다시 푸시하면 다른 문제들도 함께 검증됩니다.` : 
              ''}

            코드를 수정한 후 다시 푸시해주세요! 💪`;
                        }
                        
                        await github.rest.issues.createComment({
                          issue_number: context.issue.number, 
                          owner: context.repo.owner, 
                          repo: context.repo.repo, 
                          body: body
                        });

      # 15. 다중 문제 알림 (Mattermost)
      - name: Send multiple problems notification
        if: steps.extract-info.outputs.multiple_problems == 'true'
        run: |
          PROBLEMS_COUNT="${{ steps.extract-info.outputs.problems_count }}"
          AUTHOR="${{ steps.extract-info.outputs.author }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          cat > payload.json << EOF
          {
            "username": "BOJ-Bot",
            "icon_emoji": ":warning:",
            "text": "⚠️ **다중 문제 제출 감지**\\n\\n**${AUTHOR}**님이 PR #${PR_NUMBER}에서 ${PROBLEMS_COUNT}개의 문제를 동시에 제출했습니다.\\n\\n💡 **권장사항**: 문제별로 개별 PR을 만들어 주세요!\\n\\nPR 링크: ${PR_URL}"
          }
          EOF

          curl -X POST \
            -H "Content-Type: application/json" \
            -d @payload.json \
            "${{ secrets.MATTERMOST_WEBHOOK_URL }}" \
            --fail --silent --show-error

  # 데드라인 알림 작업
  deadline-reminder:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Check deadlines and send reminders
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python scripts/deadline_checker.py
