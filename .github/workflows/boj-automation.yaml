name: BOJ Study Automation

on:
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 */2 * * *'  # 2시간마다 데드라인 체크

jobs:
  test-and-merge:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 google-generativeai pytz
    
    - name: Extract problem and code info
      id: extract-info
      run: |
        python scripts/extract_pr_info.py
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get problem details from BOJ
      id: problem-details
      run: |
        python scripts/fetch_boj_problem.py \
          --problem-id ${{ steps.extract-info.outputs.problem_id }}
    
    - name: Generate test cases with Gemini
      id: generate-tests
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        python scripts/gemini_test_generator.py \
          --problem-id ${{ steps.extract-info.outputs.problem_id }} \
          --code-file ${{ steps.extract-info.outputs.code_file }} \
          --language ${{ steps.extract-info.outputs.language }} \
          --problem-info problem_info.json
    
    - name: Run all tests
      id: run-tests
      run: |
        python scripts/test_runner.py \
          --code-file ${{ steps.extract-info.outputs.code_file }} \
          --language ${{ steps.extract-info.outputs.language }} \
          --sample-tests sample_tests.json \
          --generated-tests generated_tests.json
    
    - name: Update README on success
      if: steps.run-tests.outputs.result == 'PASS'
      run: |
        python scripts/update_readme.py \
          --problem-id ${{ steps.extract-info.outputs.problem_id }} \
          --author ${{ steps.extract-info.outputs.author }} \
          --submission-date $(date '+%Y-%m-%d') \
          --language ${{ steps.extract-info.outputs.language }}
    
    - name: Commit README changes
      if: steps.run-tests.outputs.result == 'PASS'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        if ! git diff --cached --quiet; then
          git commit -m "📊 Update progress: Problem ${{ steps.extract-info.outputs.problem_id }} solved by ${{ steps.extract-info.outputs.author }}"
          git push
        fi
    
    - name: Auto-merge on success
      if: steps.run-tests.outputs.result == 'PASS'
      run: |
        gh pr merge ${{ github.event.pull_request.number }} --auto --squash --delete-branch
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Comment test results
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const result = '${{ steps.run-tests.outputs.result }}';
          const details = '${{ steps.run-tests.outputs.details }}';
          
          let comment = '';
          if (result === 'PASS') {
            comment = `## ✅ 테스트 통과!
            
            🎉 모든 테스트케이스를 통과했습니다!
            - 샘플 테스트: 통과
            - AI 생성 반례 테스트: 통과
            - README.md가 자동으로 업데이트되었습니다.
            
            자동으로 병합됩니다! 🚀`;
          } else {
            comment = `## ❌ 테스트 실패
            
            다음 테스트케이스에서 문제가 발견되었습니다:
            
            \`\`\`
            ${details}
            \`\`\`
            
            코드를 수정한 후 다시 푸시해주세요! 💪`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  deadline-reminder:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Check deadlines and send reminders
      env:
        MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/deadline_checker.py