# 워크플로우 이름: 알고리즘 스터디 자동화 (Approve 기반)
# 두 가지 PR 전략 지원 (모두 week-N-<githubID> 브랜치 규칙 적용):
# 1. 소유자(yeomin4242)가 원본 저장소에서 직접 브랜치를 생성하고 PR -> 원본 저장소 README 업데이트
# 2. 외부 기여자가 원본 저장소를 포크(Fork)한 후, 자신의 저장소에서 PR -> 원본 저장소 README 업데이트
name: Algorithm Study Automation (Approve Based)

on:
  schedule:
    # KST 기준 매주 월요일 00:00 (UTC 일요일 15:00)
    - cron: '0 15 * * 0'
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: [main]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write

env:
  TZ: Asia/Seoul
  PYTHON_VERSION: "3.11"
  JAVA_VERSION: "11"
  REPO_OWNER: "yeomin4242"

jobs:
  # 포크 PR 자동 승인 (전략 2: 외부 기여자 PR에만 해당)
  auto-approve-fork:
    if: github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    steps:
      - name: Auto-approve fork PRs
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          review-message: "✅ 포크된 저장소에서의 PR이 자동으로 승인되었습니다. 알고리즘 스터디 자동화 시스템이 실행됩니다."

  # PR 테스트 및 README 업데이트 작업
  test-and-update:
    needs: [auto-approve-fork]
    if: always() # auto-approve-fork 작업의 결과와 상관없이 항상 실행
    runs-on: ubuntu-latest
    steps:
      # =================================================================
      #  공통 설정 및 정보 출력
      # =================================================================
      - name: Workflow Info
        run: |
          echo "🔥 알고리즘 스터디 자동화 워크플로우 시작"
          echo "⏰ 실행 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo "🔧 트리거: ${{ github.event_name }}"
          # ... (이하 정보 출력 스크립트는 기존과 동일)

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-genai pytz requests beautifulsoup4

      # =================================================================
      #  브랜치 전략 검증 (모든 PR 관련 이벤트에서 실행)
      # =================================================================
      - name: Validate Branch Strategy and Permissions
        if: github.event_name == 'pull_request_target' || github.event_name == 'pull_request_review'
        id: branch-validation
        run: |
          # PR 관련 정보를 환경 변수로부터 읽어옵니다.
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
          HEAD_REPO="${{ github.event.pull_request.head.repo.full_name }}"
          BASE_REPO="${{ github.repository }}"
          EVENT_NAME="${{ github.event_name }}"
          
          IS_FORK="false"
          if [ "$HEAD_REPO" != "$BASE_REPO" ]; then IS_FORK="true"; fi
          
          IS_OWNER="false"
          if [ "$AUTHOR" = "${{ env.REPO_OWNER }}" ]; then IS_OWNER="true"; fi
          
          IS_APPROVED="false"
          if [ "$EVENT_NAME" = "pull_request_review" ] && [ "${{ github.event.review.state }}" = "approved" ]; then
            IS_APPROVED="true"
          fi
          
          # --- 브랜치 규칙 검증 (소유자 포함 모든 사용자에게 적용) ---
          VALIDATION_RESULT="invalid" # 기본적으로 유효하지 않다고 가정
          WEEK_NUMBER=""
          BRANCH_USER=""

          if [[ $BRANCH_NAME =~ ^week-([0-9]+)-(.+)$ ]]; then
            # 패턴이 일치하면, 주차와 사용자 ID를 추출합니다.
            WEEK_NUMBER="${BASH_REMATCH[1]}"
            BRANCH_USER="${BASH_REMATCH[2]}"
            
            # 포크된 저장소에서 온 PR(전략 2)의 경우, 추가 검증을 수행합니다.
            if [ "$IS_FORK" = "true" ] && [ "$BRANCH_USER" != "$AUTHOR" ]; then
              # 브랜치에 명시된 사용자 ID와 PR 작성자가 다르면 유효하지 않습니다.
              VALIDATION_MESSAGE="포크 환경에서는 브랜치 이름의 GitHub ID('<githubID>')가 본인의 ID와 일치해야 합니다."
            else
              # 패턴이 일치하고, (필요시) 포크 검증을 통과하면 유효합니다.
              VALIDATION_RESULT="valid"
              VALIDATION_MESSAGE="✅ 올바른 브랜치 패턴입니다."
            fi
          else
            # 패턴 자체가 일치하지 않는 경우
            VALIDATION_MESSAGE="브랜치 이름이 week-N-<githubID> 패턴을 따르지 않습니다. (예: week-1-${AUTHOR})"
          fi
          
          # 검증 결과를 다음 스텝에서 사용할 수 있도록 출력 변수로 설정합니다.
          echo "valid=$VALIDATION_RESULT" >> $GITHUB_OUTPUT
          echo "is_fork=$IS_FORK" >> $GITHUB_OUTPUT
          echo "is_owner=$IS_OWNER" >> $GITHUB_OUTPUT
          echo "is_approved=$IS_APPROVED" >> $GITHUB_OUTPUT
          echo "week_number=$WEEK_NUMBER" >> $GITHUB_OUTPUT
          echo "branch_user=$BRANCH_USER" >> $GITHUB_OUTPUT
          echo "validation_message=$VALIDATION_MESSAGE" >> $GITHUB_OUTPUT

      - name: Comment on Invalid Branch Strategy
        if: github.event_name == 'pull_request_target' && steps.branch-validation.outputs.valid == 'invalid'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const branchName = '${{ github.event.pull_request.head.ref }}';
            const author = '${{ github.event.pull_request.user.login }}';
            const validationMessage = '${{ steps.branch-validation.outputs.validation_message }}';
            
            let commentBody = `## ⚠️ 브랜치 전략 검증 실패\n\n`;
            commentBody += `❌ **문제**: ${validationMessage}\n\n`;
            commentBody += `### 📝 브랜치 규칙\n`;
            commentBody += `- **패턴**: \`week-N-<githubID>\`\n`;
            commentBody += `- **예시**: \`week-1-${author}\`\n\n`;
            commentBody += `현재 브랜치(\`${branchName}\`)를 올바른 패턴으로 수정하고 다시 PR을 보내주세요.`;

            await github.rest.issues.createComment({ owner, repo, issue_number, body: commentBody });

      # =================================================================
      #  PR 테스트 로직 (PR 생성/수정 시에만 실행)
      # =================================================================
      - name: Checkout PR Code for Testing
        if: github.event_name == 'pull_request_target' && steps.branch-validation.outputs.valid == 'valid'
        uses: actions/checkout@v4
        with:
          # PR을 보낸 사람의 저장소(원본 또는 포크)와 브랜치를 직접 체크아웃합니다.
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Run PR Logic - Extract & Test
        if: github.event_name == 'pull_request_target' && steps.branch-validation.outputs.valid == 'valid'
        id: pr-test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          WEEK_NUMBER: ${{ steps.branch-validation.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-validation.outputs.branch_user }}
        run: |
          python scripts/extract_pr_info.py
          if [ -f "problems_info.json" ]; then
            python scripts/multi_test_runner.py
          else
            echo "테스트할 문제가 없습니다."
          fi
        continue-on-error: true

      - name: Run PR Logic - Analyze Results
        if: github.event_name == 'pull_request_target' && steps.branch-validation.outputs.valid == 'valid' && steps.pr-test.outcome != 'skipped'
        id: analyze-results
        run: python scripts/analyze_test_results.py

      - name: Run PR Logic - Post Test Results Comment
        if: github.event_name == 'pull_request_target' && steps.branch-validation.outputs.valid == 'valid' && steps.pr-test.outcome != 'skipped'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            if (!fs.existsSync('test_results_summary.json')) {
              console.log('test_results_summary.json 파일이 없습니다.');
              return;
            }
            const results = JSON.parse(fs.readFileSync('test_results_summary.json', 'utf8'));
            const { passed_problems, partial_passed_problems, failed_problems, total_problems } = results;
            const weekNumber = '${{ steps.branch-validation.outputs.week_number }}';
            const branchUser = '${{ steps.branch-validation.outputs.branch_user }}';
            
            let commentBody = `## 📊 테스트 결과 요약 (Week ${weekNumber} - ${branchUser})\n\n`;
            commentBody += `| 전체 | ✅ 성공 | ⚠️ 부분 성공 | ❌ 실패 |\n`;
            commentBody += `|:---:|:---:|:---:|:---:|\n`;
            commentBody += `| ${total_problems}개 | ${passed_problems}개 | ${partial_passed_problems}개 | ${failed_problems}개 |\n\n`;
            commentBody += `### 🎯 다음 단계\n`;
            commentBody += `✅ **이 PR을 approve하면 원본 저장소의 README가 자동으로 업데이트됩니다!**\n\n`;
            commentBody += `---\n🎉 **테스트가 완료되었습니다!**`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      # =================================================================
      #  README 업데이트 로직 (Approve 시에만 실행)
      # =================================================================
      - name: Checkout Base Repo for README update
        if: github.event_name == 'pull_request_review' && steps.branch-validation.outputs.is_approved == 'true' && steps.branch-validation.outputs.valid == 'valid'
        uses: actions/checkout@v4
        with:
          # README 업데이트는 항상 원본 저장소에서 수행합니다.
          repository: ${{ github.repository }}
          ref: 'main'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate analysis file from PR
        if: github.event_name == 'pull_request_review' && steps.branch-validation.outputs.is_approved == 'true' && steps.branch-validation.outputs.valid == 'valid'
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WEEK_NUMBER: ${{ steps.branch-validation.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-validation.outputs.branch_user }}
        run: |
          echo "🔍 PR #${PR_NUMBER}의 변경된 파일 목록을 API로 가져옵니다..."
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/files" \
               > pr_files.json
          echo "📊 pr_files.json을 기반으로 problems_info.json을 생성합니다."
          python scripts/analyze_merged_pr.py

      - name: Update README.md file
        if: github.event_name == 'pull_request_review' && steps.branch-validation.outputs.is_approved == 'true' && steps.branch-validation.outputs.valid == 'valid'
        env:
          WEEK_NUMBER: ${{ steps.branch-validation.outputs.week_number }}
          BRANCH_USER: ${{ steps.branch-validation.outputs.branch_user }}
          IS_OWNER: ${{ steps.branch-validation.outputs.is_owner }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          if [ -f "problems_info.json" ] && [ -f "scripts/update_readme_batch.py" ]; then
            echo "📝 README.md 업데이트를 시작합니다."
            python scripts/update_readme_batch.py
          else
            echo "⚠️ README 업데이트에 필요한 파일이 없어 Fallback 로직을 실행합니다."
            cat >> README.md << EOF

            ## 📋 Week ${WEEK_NUMBER} - ${BRANCH_USER} (Fallback)
            - **PR #${PR_NUMBER}** approved at $(date)
            - ✅ Submission complete
            EOF
          fi

      - name: Generate Commit Message
        if: github.event_name == 'pull_request_review' && steps.branch-validation.outputs.is_approved == 'true' && steps.branch-validation.outputs.valid == 'valid'
        id: generate-commit-message
        run: |
          BRANCH_USER="${{ steps.branch-validation.outputs.branch_user }}"
          WEEK_NUMBER="${{ steps.branch-validation.outputs.week_number }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          COMMIT_MSG="docs: Update README for week-${WEEK_NUMBER} by ${BRANCH_USER} (PR #${PR_NUMBER})"
          echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Commit and Push README.md
        if: github.event_name == 'pull_request_review' && steps.branch-validation.outputs.is_approved == 'true' && steps.branch-validation.outputs.valid == 'valid'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: ${{ steps.generate-commit-message.outputs.commit_message }}
          branch: main
          commit_user_name: GitHub Action Bot
          commit_user_email: action@github.com
          file_pattern: README.md

      - name: Post Approve Success Comment
        if: github.event_name == 'pull_request_review' && steps.branch-validation.outputs.is_approved == 'true' && steps.branch-validation.outputs.valid == 'valid'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchUser = '${{ steps.branch-validation.outputs.branch_user }}';
            const isOwner = '${{ steps.branch-validation.outputs.is_owner }}' === 'true';
            
            let commentBody = `## 🎉 README 업데이트 완료!\n\n`;
            
            if (isOwner) {
              commentBody += `👑 **저장소 소유자(${branchUser})의 제출이 승인되어 원본 저장소의 README가 업데이트되었습니다.**\n\n`;
            } else {
              commentBody += `✅ **${branchUser}님의 제출이 승인되어 원본 저장소의 README가 업데이트되었습니다.**\n\n`;
            }
            
            commentBody += `이제 이 PR을 안전하게 머지할 수 있습니다! 🚀`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: Send Mattermost DM Notification
        if: github.event_name == 'pull_request_target' && steps.branch-validation.outputs.valid == 'valid' && always() && steps.pr-test.outcome != 'skipped'
        env:
          PERSONAL_WEBHOOK_URL: ${{ secrets[format('{0}_MATTERMOST_URL', steps.branch-validation.outputs.branch_user)] }}
          BRANCH_USER: ${{ steps.branch-validation.outputs.branch_user }}
          OVERALL_RESULT: ${{ steps.analyze-results.outputs.overall_result }}
        run: |
          if [ -n "$PERSONAL_WEBHOOK_URL" ]; then
            if [ "$OVERALL_RESULT" = "PASS" ]; then
              python scripts/send_success_notification.py "${{ github.event.pull_request.html_url }}" "$BRANCH_USER" "$PERSONAL_WEBHOOK_URL"
            else
              python scripts/send_failure_notification.py "${{ github.event.pull_request.html_url }}" "$BRANCH_USER" "$PERSONAL_WEBHOOK_URL"
            fi
          else
            echo "⚠️ $BRANCH_USER 님의 Mattermost 웹훅 URL이 설정되지 않았습니다."
          fi
      
      # =================================================================
      #  주간 실행 로직
      # =================================================================
      - name: Checkout main branch for weekly reset
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          ref: 'main'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Weekly Logic - Reset README for New Week
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          echo "📅 새로운 주차를 위해 README를 초기화합니다."
          python scripts/weekly_reset.py --force

      - name: Commit and Push Weekly Reset
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Reset README for the new week"
          branch: main
          commit_user_name: GitHub Action Bot
          commit_user_email: action@github.com
          file_pattern: README.md
