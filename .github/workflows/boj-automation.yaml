# 워크플로우 이름: 알고리즘 스터디 자동화 (PR 및 주간 업데이트)
name: Algorithm Study Automation (PR & Weekly)

on:
  schedule:
    # KST 기준 매주 월요일 00:00 (UTC 일요일 15:00)
    - cron: '0 15 * * 0'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  TZ: Asia/Seoul
  PYTHON_VERSION: "3.11"
  JAVA_VERSION: "11"

jobs:
  test-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: Workflow Info
        run: |
          echo "🔥 알고리즘 스터디 자동화 워크플로우 시작"
          echo "⏰ 실행 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo "🔧 트리거: ${{ github.event_name }}"

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # 수정된 부분: 포크 저장소 지원
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          fetch-depth: 0

      - name: Setup Python and Java
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-genai pytz requests beautifulsoup4

      # =================================================================
      #  PR 실행 로직
      # =================================================================
      - name: Run PR Logic - Extract & Test
        if: github.event_name == 'pull_request'
        id: pr-test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python scripts/extract_pr_info.py
          if [ -f "problems_info.json" ]; then
            python scripts/multi_test_runner.py
          else
            echo "테스트할 문제가 없습니다."
          fi
        continue-on-error: true

      - name: Run PR Logic - Analyze Results
        if: github.event_name == 'pull_request' && steps.pr-test.outcome != 'skipped'
        id: analyze-results
        run: python scripts/analyze_test_results.py

      - name: Run PR Logic - Update README and Commit
        if: github.event_name == 'pull_request' && steps.pr-test.outcome != 'skipped'
        run: |
          echo "📝 PR에 제출된 모든 문제에 대해 README 업데이트를 시도합니다."
          python scripts/update_readme_batch.py

          if ! git diff --quiet README.md; then
            echo "README.md 변경사항을 커밋합니다."
            # 수정된 부분: 원본 저장소에 푸시하기 위한 설정
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action Bot"
            
            # 원본 저장소를 upstream으로 설정
            git remote add upstream https://github.com/${{ github.repository }}.git
            
            git add README.md
            git commit -m "Docs: Update README.md by PR #${{ github.event.pull_request.number }}"
            
            # 원본 저장소의 main 브랜치에 푸시 (포크 환경에서)
            if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
              echo "포크된 저장소에서의 PR입니다. 별도 처리가 필요할 수 있습니다."
              # 포크 저장소의 경우 원본 저장소에 직접 푸시할 수 없으므로
              # PR 브랜치에만 푸시
              git push origin ${{ github.event.pull_request.head.ref }}
            else
              git push origin ${{ github.event.pull_request.head.ref }}
            fi
          else
            echo "README.md에 변경사항이 없어 커밋하지 않습니다."
          fi

      - name: Run PR Logic - Post Comment on PR
        if: github.event_name == 'pull_request' && steps.analyze-results.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('test_results_summary.json', 'utf8'));
            const { overall_success, passed_problems, partial_passed_problems, failed_problems, total_problems } = results;
            
            let commentBody = `## 📊 테스트 결과 요약\n\n`;
            commentBody += `| 전체 | ✅ 성공 | ⚠️ 부분 성공 | ❌ 실패 |\n`;
            commentBody += `|:---:|:---:|:---:|:---:|\n`;
            commentBody += `| ${total_problems}개 | ${passed_problems}개 | ${partial_passed_problems}개 | ${failed_problems}개 |\n\n`;
            
            commentBody += `\n---\n🎉 **PR 제출이 확인되었습니다!** 테스트 결과와 상관없이 제출 현황이 README에 반영됩니다.`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Send Mattermost DM Notification
        if: github.event_name == 'pull_request' && always() && steps.analyze-results.outcome != 'skipped'
        env:
          PERSONAL_WEBHOOK_URL: ${{ secrets[format('{0}_MATTERMOST_URL', github.event.pull_request.user.login)] }}
        run: |
          if [ "${{ steps.analyzer-results.outputs.overall_result }}" = "PASS" ]; then
            echo "✅ 테스트 성공! 성공 알림을 전송합니다."
            python scripts/send_success_notification.py "${{ github.event.pull_request.html_url }}" "${{ github.event.pull_request.user.login }}" "$PERSONAL_WEBHOOK_URL"
          else
            echo "❌ 테스트 실패! 실패 알림을 전송합니다."
            python scripts/send_failure_notification.py "${{ github.event.pull_request.html_url }}" "${{ github.event.pull_request.user.login }}" "$PERSONAL_WEBHOOK_URL"
          fi

      # =================================================================
      #  주간 실행 로직 (기존과 동일)
      # =================================================================
      - name: Run Weekly Logic - Reset README for New Week
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          echo "📅 새로운 주차를 위해 README를 초기화합니다."
          python scripts/weekly_reset.py --force

      - name: Run Weekly Logic - Commit and Push to main
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          if ! git diff --quiet README.md; then
            echo "README.md 변경사항을 main 브랜치에 커밋합니다."
            git add README.md
            git commit -m "chore: 주간 README 초기화"
            git push origin main
          else
            echo "README.md에 변경사항이 없어 커밋하지 않습니다."
          fi